@using BlazorTool.Client.Services
@inherits LayoutComponentBase
@inject UserState UserState
@inject NavigationManager Navigation
@inject ApiServiceClient ApiClient
@inject IHttpClientFactory HttpClientFactory
@inject AppConfiguration AppConfig
@implements IDisposable

<TelerikRootComponent>
    <div class="page">
        <div class="sidebar">
            <NavMenu />
        </div>
        
        <main>
            <div class="top-row px-4">
                <span class="api-address-display">
                    API server: @AppConfig.ApiAddress
                </span>
                @if(UserState.IsAuthenticated)
                {
                    <span class="user-name">Hello, @UserState.UserName!</span>
                    <button class="btn btn-link logout-button" @onclick="Logout">Logout</button>
                }
                <a href="changelog">@FormattedVersion (@buildDate)</a>
            </div>


            <article class="content px-4">
                @Body
            </article>
        </main>
    </div>

    <div id="blazor-error-ui">
        An unhandled error has occurred.
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>
</TelerikRootComponent>
@code{
    private string FormattedVersion { get; set; } = "Version";
    private string buildDate = AppInfo.BuildDate;

    protected override void OnInitialized()
    {
        var versionString = ThisAssembly.AssemblyInformationalVersion;
        var parts = versionString.Split('+');
        var versionNumber = parts[0];
        var buildTime = string.Empty;

        if (parts.Length > 1 && parts[1].StartsWith("buildTime="))
        {
            var buildTimeRaw = parts[1].Substring("buildTime=".Length);
            if (System.DateTime.TryParse(buildTimeRaw.Replace('_', ' '), out var parsedTime))
            {
                buildTime = parsedTime.ToString("yyyy-MM-dd HH:mm:ss");
                FormattedVersion = $"Version {versionNumber} ({buildTime})";
            }
            else
            {
                FormattedVersion = $"Version {versionNumber}";
            }
        }
        else
        {
            FormattedVersion = $"Version {versionNumber}";
        }
        AppConfig.OnChange += StateHasChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var Http = HttpClientFactory.CreateClient("ServerHost");
            buildDate = await Http.GetStringAsync("buildinfo.txt");
        }
        catch (Exception)
        {
            buildDate = "не удалось загрузить";
        }
        
        await AppConfig.InitializeAsync();
        await UserState.InitializationTask;

        // If user state is not authenticated locally, redirect to login
        if (!UserState.IsAuthenticated)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        // If on a page other than login, verify session with the server
        if (!Navigation.Uri.EndsWith("/login", StringComparison.OrdinalIgnoreCase))
        {
            try
            {
                var response = await ApiClient.CheckSessionAsync();
                if (!response.IsSuccessStatusCode)
                {
                    // Server session expired or invalid, clear local state and redirect
                    await UserState.ClearAsync();
                    Navigation.NavigateTo("/login");
                }
            }
            catch (Exception ex)
            {
                // Handle potential network errors or API unavailability
                Console.WriteLine($"Failed to check session: {ex.Message}");
                // Optional: redirect to an error page or show a notification
                await UserState.ClearAsync();
                Navigation.NavigateTo("/login");
            }
        }
    }

    private async Task Logout()
    {
        await UserState.ClearAsync();
        Navigation.NavigateTo("/login");
    }

    public void Dispose()
    {
        AppConfig.OnChange -= StateHasChanged;
    }
}