@page "/settings"
@inject BlazorTool.Client.Services.ApiServiceClient apiService

<h3>Settings</h3>
<p class="active">user=@currentUser</p>
<div class="container">
    <div class="row mb-3">
        <div class="col-md-6">
            <label for="apiUrl" class="form-label">API Address</label>
            <div class="input-group">
                <input type="text" id="apiUrl" class="form-control" @bind="ApiAddress" />
                <button class="btn btn-outline-secondary" type="button" @onclick="TestApiAddress">Test API Address</button>
            </div>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-6">
            <label for="language" class="form-label">Language</label>
            <select id="language" class="form-select" @bind="SelectedLanguage">
                <option value="en">English</option>
                <option value="pl">Polski</option>
                <option value="fr">Français (French)</option>
                <option value="ru">Русский</option> <!-- Corrected value for Russian -->
                {!-- Add more languages as needed --}
            </select>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <button class="btn btn-primary" @onclick="SaveSettings">Save Settings</button>
        </div>
    </div>
</div>

@if (!string.IsNullOrEmpty(StatusMessage))
{
    <div class="mt-3">
        <p class="status-message @StatusMessageClass">@StatusMessage</p>
    </div>
}

@code{
    protected string? ApiAddress { get; set; }
    protected string? SelectedLanguage { get; set; } = "pl"; 

    protected string? StatusMessage { get; set; }
    protected string? StatusMessageClass { get; set; } // e.g., "text-success" or "text-danger"
    string currentUser = "testUser"; // Placeholder for current user, replace with actual user logic"

    protected override async Task OnInitializedAsync()
    {
        // TODO: Load saved settings (e.g., from localStorage or a service)
        await LoadSettingsAsync();
        await InvokeAsync(StateHasChanged); // Ensure UI updates if settings are loaded asynchronously
    }

    protected async Task LoadSettingsAsync()
    {
        ApiAddress = await LoadSettingAsync("apiAddress");
        SelectedLanguage = await LoadSettingAsync("selectedLanguage") ?? "pl"; // Set default if not found
    }

    protected async Task<bool> TestApiAddress()
    {
        StatusMessage = string.Empty;
        if (string.IsNullOrWhiteSpace(ApiAddress))
        {
            StatusMessage = "API Address cannot be empty.";
            StatusMessageClass = "text-danger";
            return false; 
        }

        try
        {
            var response = await apiService.CheckApiAddress(ApiAddress);
            if (!response.Item1)
            {
                StatusMessage = response.Item2; 
                StatusMessageClass = "text-danger";
                return false;
            }
            StatusMessage = $"Successfully connected to API at '{ApiAddress}'.";
            StatusMessageClass = "text-success";
            return true;
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error testing API address: {ex.Message}";
            StatusMessageClass = "text-danger";
            return false;
        }
    }

    protected async Task SaveSettings()
    {
        StatusMessage = string.Empty;
        try
        {
            
            var testResult = await TestApiAddress();
            if (!testResult)
            {
                StatusMessage = "Wrong API address"; // corrected spelling of "address"
                StatusMessageClass = "text-danger";
                return;
            }

            var s1 = await SaveSettingAsync("apiAddress", ApiAddress, currentUser);
            var s2 = await SaveSettingAsync("selectedLanguage", SelectedLanguage, currentUser); 
            if (s1 && s2)
            {
                StatusMessage = "Settings saved successfully!";
                StatusMessageClass = "text-success";
            }
            else
            {
                StatusMessage = "Failed to save settings.";
                StatusMessageClass = "text-danger";
                return;
            }
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error saving settings: {ex.Message}";
            StatusMessageClass = "text-danger";
        }
    }

    protected async Task<bool> SaveSettingAsync(string key, string value, string user)
    {
        var result = await apiService.SaveSettingAsync(key, value, user);
        return result;
    }

    protected async Task<string?> LoadSettingAsync(string key)
    {
        var result = await apiService.GetSettingAsync(key, currentUser);
        return result; 
    }
}