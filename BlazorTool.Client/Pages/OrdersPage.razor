@page "/orders"

@using BlazorTool.Client.Models
@using BlazorTool.Client.Services
@using BlazorTool.Client.Components
@using System.Text
@using System.Linq
@using System.Diagnostics
@using Telerik.DataSource.Extensions
@using Telerik.Blazor
@inject BlazorTool.Client.Services.ApiServiceClient apiService
@rowStyles

<label>Devices:</label>
@if (isDevicesLoading)
{
    <div>loading device list...</div>
}else
{    
<div class="filter-controls-row">
    <div>
            <TelerikRadioGroup Data="@TagModes"
                               @bind-Value="@TagMode"
                               ValueField="@nameof(Tags.Mode)"
                               TextField="@nameof(Tags.Description)"
                               Layout="RadioGroupLayout.Horizontal">
            </TelerikRadioGroup>
            <TelerikButton OnClick="@selectAllDevices"
                            ThemeColor="@ThemeConstants.Button.ThemeColor.Base">
                Select All
            </TelerikButton>

        <TelerikMultiSelect Data="@devices"
                            @bind-Value="@selectedDeviceIds"
                            ValueField="@nameof(Device.MachineID)"
                            TextField="@nameof(Device.AssetNo)"
                            TagMode="@TagMode"
                            MaxAllowedTags="@MaxAllowedTags"
                            Placeholder="Select devices"
                            AutoClose="false"
                                OnClose="@OnMultiValueClosed"
                            Width="500px"
                            ShowClearButton="true">
        </TelerikMultiSelect>
    </div>
    <div>
            <TelerikComboBox Data="@deviceCategories" TextField="DeviceCategory"
                             Placeholder="Select category..." ShowClearButton="true" Filterable="true"
                             ValueChanged="@((string cat) => OnCategoryChanged(cat))"
            >
            </TelerikComboBox>
    </div>
    <div>
            <TelerikComboBox Data="@deviceTypes" TextField="DeviceType"
                             Placeholder="Select type..." ShowClearButton="true" Filterable="true"
                             ValueChanged="@((string cat) => OnTypeChanged(cat))">
            </TelerikComboBox>
        </div>
</div>
}

<h3>Orders</h3>
@if (isOrdersLoading)
{
    <div>loading order list...</div>
}
else
{
    <TelerikGrid Data="@OrderDevicesForGrid"
                 Id="Grid1"
                 RowDraggable="false"
                 @ref="@GridRef"
                 Sortable="true"
                 Pageable="true"
                 PageSize="20"
                 OnRowRender="@OnRowRenderHandler"
                 OnRowDoubleClick="@OnRowClick"
                     >
        <GridSettings>
        </GridSettings>
        <GridColumns>
            <GridColumn Field="@nameof(WorkOrderView.WorkOrderID)" Editable="false" Visible="false"></GridColumn>
            <GridColumn Field="@nameof(WorkOrderView.DepName)" Title="DepName"></GridColumn>
            <GridColumn Field="@nameof(WorkOrderView.DeviceName)" Title="Device"></GridColumn>
            <GridColumn Field="@nameof(WorkOrderView.DeviceCategory)"></GridColumn>
            <GridColumn Field="@nameof(WorkOrderView.WOReason)"></GridColumn>
            <GridColumn Field="@nameof(WorkOrderView.ModPerson)"></GridColumn>
            <GridColumn Field="@nameof(WorkOrderView.WOState)"></GridColumn>
            <GridColumn Field="@nameof(WorkOrderView.WOLevel)"></GridColumn>
            <GridColumn Field="@nameof(WorkOrderView.AssignedPerson)" Title="AssignedPerson"></GridColumn>
            <GridColumn Field="@nameof(WorkOrderView.AddDate)"></GridColumn>
            <GridColumn Field="@nameof(WorkOrderView.StartDate)" Title="Start Date"></GridColumn>
            <GridColumn Field="@nameof(WorkOrderView.EndDate)" Title="End Date"></GridColumn>
            <GridColumn Field="@nameof(WorkOrderView.CloseDate)"></GridColumn>
        </GridColumns>
    </TelerikGrid>

    <TelerikWindow @bind-Visible="@isOrderCardOpen"
                   CloseOnOverlayClick="true"
                   Modal="true">
        <WindowTitle>
        </WindowTitle>
        <WindowContent>
             <WorkOrderComponent WorkOrder="@selectedOrder" />
        </WindowContent>
        <WindowActions>
            <WindowAction Name="Close" />
        </WindowActions>
        <WindowFooter>
        </WindowFooter>
    </TelerikWindow>
}


@code {
    private bool isOrdersLoading = false;
    private bool isDevicesLoading = false;
    private List<WorkOrder> OrdersForGrid = new List<WorkOrder>();
    private List<WorkOrderView> OrderDevicesForGrid = new List<WorkOrderView>();
    private WorkOrder selectedOrder;
    private IEnumerable<Device> selectedDevices = new List<Device>();
    private List<int> selectedDeviceIds = new List<int>();
    private MarkupString rowStyles = new MarkupString();
    private List<Device> devices = new List<Device>();
    List<string?> deviceCategories = new List<string?>();
    List<string?> deviceTypes = new List<string?>();
    public TelerikGrid<WorkOrderView> GridRef { get; set; }
    public CompositeFilterDescriptor Value { get; set; } = new CompositeFilterDescriptor();
    private bool isOrderCardOpen = false;
    private MultiSelectTagMode TagMode { get; set; } = MultiSelectTagMode.Single;
    private int? MaxAllowedTags { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Initialized ORDERS PAGE");
        isDevicesLoading = true;
        StateHasChanged();
        devices = await apiService.GetAllDevicesCachedAsync();
        deviceCategories = devices.Select(d => d.DeviceCategory).Distinct().ToList();
        deviceTypes = devices.Select(d => d.Type).Distinct().ToList();
        isDevicesLoading = false;
        StateHasChanged();
        await LoadData();
    }

    private async Task LoadData()
    {
        isOrdersLoading = true;
        //Value = GetCompositeFilterDescriptor();
        StateHasChanged();
        if (devices == null || devices.Count == 0)
        {
            return; // No devices available, exit early
        }

        if (selectedDevices == null || selectedDevices.Count() == 0)
        {
            // selectedDevices = new List<Device>() { devices.FirstOrDefault() };
            selectedDevices = new List<Device>();
        }
        if (selectedDeviceIds == null || selectedDeviceIds.Count == 0)
        {
            selectedDeviceIds = new List<int>();
            // selectedDeviceIds = selectedDevices.Select(d => d.MachineID).ToList();
        }
        Console.WriteLine($"Selected devices count: {selectedDevices.Count()}");
        OrdersForGrid = await apiService.GetWorkOrdersCachedAsync(selectedDevices);
        OrderDevicesForGrid = OrdersForGrid.Select(o => new WorkOrderView(o, GetDeviceNameByOrder(o))).ToList();
        rowStyles = RenderStatesStyle(OrdersForGrid);
        isOrdersLoading = false;
        StateHasChanged();
    }

    private string GetDeviceNameByOrder(WorkOrder order)
    {
        return devices.First(d => d.MachineID == order.MachineID)?.AssetNo ?? string.Empty;
    }

    public class WorkOrderView : WorkOrder
    {
        public string DeviceName { get; set; }

        public WorkOrderView(WorkOrder order, string deviceName)
        {
            this.WorkOrderID = order.WorkOrderID;
            this.MachineID = order.MachineID;
            this.AssetNo = order.AssetNo;
            this.DeviceCategory = order.DeviceCategory;
            this.WODesc = order.WODesc;
            this.WOCategory = order.WOCategory;
            this.WOState = order.WOState;
            this.WOReason = order.WOReason;
            this.AddDate = order.AddDate;
            this.TakeDate = order.TakeDate;
            this.CloseDate = order.CloseDate;
            this.Cost = order.Cost;
            this.TakePersons = order.TakePersons;
            this.PlanID = order.PlanID;
            this.StateColor = order.StateColor;
            this.ModDate = order.ModDate;
            this.ModPerson = order.ModPerson;
            this.WOLevel = order.WOLevel;
            this.LevelID = order.LevelID;
            this.ActCount = order.ActCount;
            this.DepName = order.DepName;
            this.AssignedPerson = order.AssignedPerson;
            this.FileCount = order.FileCount;
            this.PartCount = order.PartCount;
            this.PlanActCount = order.PlanActCount;
            this.StartDate = order.StartDate;
            this.EndDate = order.EndDate;
            this.IsScheduledPlanned = order.IsScheduledPlanned;
            this.CategoryID = order.CategoryID;
            this.ReasonID = order.ReasonID;
            this.IneffectiveCount = order.IneffectiveCount;
            this.PersonTakeDate = order.PersonTakeDate;
            this.DeviceCategoryID = order.DeviceCategoryID;

            this.DeviceName = deviceName;
        }
    }

    #region Filter events
    //Select devives from MultiSelect
    private async void OnMultiValueClosed()
    {
        selectedDevices = devices.Where(d => selectedDeviceIds.Contains(d.MachineID)).ToList();
        await LoadData(); 
    }

    async Task OnCategoryChanged(string? category)
    {
        if (string.IsNullOrEmpty(category))
        {
            return;
        }
        else
        {
            selectedDevices = devices.Where(d => d.DeviceCategory == category).ToList();
            selectedDeviceIds = selectedDevices.Select(d => d.MachineID).ToList();
        }
        await LoadData();
    }

    async Task OnTypeChanged(string? type)
    {
        if (string.IsNullOrEmpty(type))
        {
            return;
        }
        else
        {
            
            selectedDevices = devices.Where(d => d.Type == type).ToList();
            selectedDeviceIds = selectedDevices.Select(d => d.MachineID).ToList();
        }
        await LoadData();
    }

    async Task selectAllDevices()
    {
        selectedDeviceIds = devices.Select(d => d.MachineID).ToList();
        selectedDevices = devices.ToList();
        await LoadData();
    }

    #endregion

    #region Filter Descriptor
    private CompositeFilterDescriptor GetCompositeFilterDescriptor()
    {
        return new CompositeFilterDescriptor()
        {
            FilterDescriptors = new FilterDescriptorCollection
        {
            new FilterDescriptor
            {
                Member = "WOState",
                MemberType = typeof(string),
                Value = "W trakcie realizacji",
                Operator = FilterOperator.IsEqualTo
            },
            new FilterDescriptor
            {
                Member = "DepName",
                MemberType = typeof(string),
                Value = "UR",
                Operator = FilterOperator.IsEqualTo
            }

        }
        };
    }
    private async void OnSelect(IEnumerable<Device> selectedItems)
    {
        selectedDevices = selectedItems;
        await LoadData();
        foreach (var item in selectedItems)
            Debug.Print(item.AssetNo);
    }
    async void OnValueChanged(CompositeFilterDescriptor filter)
    {
        Value = filter;
        await LoadData();
        ApplyFilter(Value);
    }


    void ApplyFilter(CompositeFilterDescriptor filter)
    {
        var dataSourceRequest = new DataSourceRequest { Filters = new List<IFilterDescriptor> { filter } };
        var queryable = OrdersForGrid.AsQueryable();
        var datasourceResult = OrdersForGrid.ToDataSourceResult(dataSourceRequest);

        OrdersForGrid = datasourceResult.Data.Cast<WorkOrder>().ToList();

    }

    private List<Tags> TagModes { get; set; } = new List<Tags>()
    {
        new Tags { Mode = MultiSelectTagMode.Single, Description = "Compact" },
        new Tags { Mode = MultiSelectTagMode.Multiple, Description = "Extended" }
    };

    private class Tags
    {
        public MultiSelectTagMode Mode { get; set; }
        public string Description { get; set; }
    }
    #endregion

    #region Grid Row Styles
    void OnRowRenderHandler(GridRowRenderEventArgs args)
    {
        var item = args.Item as WorkOrderView;

        args.Class += "state-" + item?.StateColor?.TrimStart('#');
    }

    void OnRowClick(GridRowClickEventArgs args)
    {
        var item = args.Item as WorkOrderView;
        if (item != null)
        {
            selectedOrder = item;
            isOrderCardOpen = true;
            StateHasChanged();
        }
    }

    void OnPopupClose()
    {
        isOrderCardOpen = false;
    }

    private MarkupString RenderStatesStyle(List<WorkOrder> orders)
    {
        var uniqueColors = orders
           .Select(o => o.StateColor)
           .Where(c => !string.IsNullOrWhiteSpace(c))
           .Distinct();

        var sb = new StringBuilder();
        sb.AppendLine("<style>");
        foreach (var color in uniqueColors)
        {
            var safeName = color.TrimStart('#');
            switch(safeName.ToLowerInvariant())
            {
                case "lime":
                    safeName = "LightGreen";
                    break;
                case "red":
                    safeName = "LightCoral";
                    break;
                case "yellow":
                    safeName = "LightYellow";
                    break;                
                default:
                    break;
            } 
            sb.AppendLine($".k-grid .k-master-row.state-{color} {{");
            sb.AppendLine($"    background-color: {safeName};");
            sb.AppendLine("}");
        }
        sb.AppendLine("</style>");

        return new MarkupString(sb.ToString());
    }
    #endregion

}
