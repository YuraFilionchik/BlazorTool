@page "/login"
@using BlazorTool.Client.Models
@inject NavigationManager Navigation
@inject BlazorTool.Client.Services.UserState UserState
@inject BlazorTool.Client.Services.ApiServiceClient ApiServiceClient

<div class="login-container">
    <form @onsubmit="HandleLogin">
        <h2>Login to the @AppInfo.Name</h2>
        <div class="form-group">
            <label for="username">User name</label>
            <TelerikComboBox Data="@Persons"
                             TextField="Name"
                             ValueField="Name"
                             @bind-Value="@Username"
                             Placeholder="Select or enter user name..."
                             Filterable="true"
                             AllowCustom="true"
                             Width="100%">
            </TelerikComboBox>
        </div>
        <div class="form-group">
            <label for="password">Password</label>
            <input id="password" type="password" class="form-control" @bind="Password" autocomplete="current-password" />
        </div>
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="error-message">@ErrorMessage</div>
        }
        <button type="submit" class="btn-login" disabled="@isLoading">
            @if (isLoading)
            {
                <TelerikLoader Type="LoaderType.ConvergingSpinner" Size="Telerik.Blazor.ThemeConstants.Loader.Size.Small" />
            }
            else
            {
                <span>Enter</span>
            }
        </button>
    </form>
</div>

@code {
    private string Username { get; set; } = string.Empty;
    private string Password { get; set; } = string.Empty;
    private string ErrorMessage { get; set; } = string.Empty;
    private List<Person> Persons { get; set; } = new List<Person>();
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        Persons = await ApiServiceClient.GetAllPersons();
    }

    private async Task HandleLogin()
    {
        ErrorMessage = string.Empty;
        if (string.IsNullOrWhiteSpace(Username) || string.IsNullOrWhiteSpace(Password))
        {
            ErrorMessage = "Empty field";
            return;
        }

        isLoading = true;
        try
        {
            var loginRequest = new BlazorTool.Client.Models.LoginRequest
            {
                Username = Username,
                Password = Password
            };

            var response = await ApiServiceClient.PostSingleAsync<LoginRequest, IdentityData>("api/v1/identity/loginpassword", loginRequest);

            if (response != null && response.IsValid && response.Data != null)
            {
                var identityData = response.Data;
                UserState.UserName = identityData.Name;
                UserState.Token = identityData.Token;
                UserState.Password = Password; // Save password to UserState for token refresh
                await UserState.SaveIdentityDataAsync(identityData); // Save identityData to local storage
                Navigation.NavigateTo("/");
            }
            else
            {
                ErrorMessage = response?.Errors?.FirstOrDefault() ?? "Login failed. Please check your credentials.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}

