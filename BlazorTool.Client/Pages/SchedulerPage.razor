@page "/scheduler"

@using System.Linq
@using BlazorTool.Client.Models
@using BlazorTool.Client.Services
@using BlazorTool.Client.Components
@using System.Text
@using System.Diagnostics
@using Telerik.Blazor.Components
@using Telerik.Blazor.Components.Scheduler
@using Telerik.DataSource.Extensions
@inject IJSRuntime JSRuntime
@inject ApiServiceClient apiService
@inject AppointmentService ApptService

@cellStyles
<h3>Scheduler</h3>
<div class="filter-controls-row">
    <div style="flex-basis: 66%; flex-shrink:1; flex-grow:0; border-right: outset; display: flex; align-items: top; gap: 1rem;">
        <div style="max-width: 400px;">
        <label>Assigned persons: </label>
            <TelerikMultiSelect Data="@Persons"
                                @bind-Value="@selectedAssignedPersons"
                                TagMode="@MultiSelectTagMode.Multiple"
                                Placeholder="Select assigned persons"
                                AutoClose="false"
                                OnClose="@OnAssignedPersonsClosed"
                                OnChange="@OnPersonSelectChanged"
                                ShowClearButton="true"
                                Size="sm">
                                
            </TelerikMultiSelect>
        </div>
        <div>
            <label>Department: </label>
            <TelerikComboBox Data="@Departments" TextField="Department"
                             Placeholder="Select department..." Filterable="false"
                             AllowCustom="false" Value="@selectedDepartment"
                             ValueChanged="@((string dep) => OnDepartmentChanged(dep))"
                             Size="sm">
            </TelerikComboBox>
        </div>
        <div>
            <label>Device: </label>
            <TelerikComboBox Data="@AssetNumbers"
                             Placeholder="Select asset..."
                             Filterable="true"
                             AllowCustom="true"
                             Value="@selectedAssetNo"
                             ValueChanged="@((string assetNo) => OnAssetNoChanged(assetNo))"
                             Size="sm">
            </TelerikComboBox>
        </div>
 
    </div>
    @* device categories filter *@
    <div style="flex-basis: 32%; flex-shrink:1; display: flex;  flex-grow:0; align-items: center; gap: 1rem;">
        <label>Device category: </label>
        <div style="min-width:30px">
            <TelerikComboBox Data="@DeviceCategories" TextField="DeviceType"
                             Value="@selectedCategory"
                             Placeholder="Select device category..." Filterable="true"
                             ValueChanged="@((string cat) => OnCategoryChanged(cat))">
            </TelerikComboBox>
        </div>
    </div>
    
    @*end device categories filter *@
</div>
<div style="display:flex; gap:1rem;">
    <div style="flex-basis: 66%; flex-shrink:1; flex-grow:0;">
        <div style="display:flex; flex-direction: row; gap:10px">
            <div><p>Scheduled orders: @Appointments.Count()</p></div>
            <div><TelerikButton OnClick="@HardLoadData" Size="Small" ThemeColor="@ThemeConstants.Button.ThemeColor.Tertiary">Reload all data</TelerikButton></div>
        </div>
        
        <TelerikScheduler TItem="SchedulerAppointment"
                          Id="Scheduler1"
                          Data="@Appointments"
                          @ref="SchedulerRef"
                          @bind-Date="SchedulerDate"
                          @bind-View="CurrentView"
                          AllowCreate="true"
                          AllowUpdate="true"
                          AllowDelete="true"
                          OnCreate="@OnCreateAppointment"
                          OnUpdate="@OnUpdateAppointment"
                          OnDelete="@OnDeleteAppointment"
                          OnEdit="@EditHandler"
                          IdField="Id"
                          StartField="Start"
                          EndField="End"
                          TitleField="Title"
                          DescriptionField="Description"
                          IsAllDayField="IsAllDay"
                          Height="80vh"
                          >
            <SchedulerResources>
                <SchedulerResource Field="StateColor" Title="StateColor" Data="@statuses" />
            </SchedulerResources>
            <ItemTemplate>
                <div>
                    @{
                        var meeting = context as SchedulerAppointment;
                    }
                    

                    <span style="color:black;">@GenerateItemText(meeting)</span>
                    </div>
            </ItemTemplate>

            <SchedulerViews>
                <SchedulerDayView StartTime="@DayStart" EndTime="@DayEnd" />
                <SchedulerWeekView StartTime="@DayStart" EndTime="@DayEnd" />
                <SchedulerMonthView ItemsPerSlot=4>
                   
                </SchedulerMonthView>
            </SchedulerViews>
        </TelerikScheduler>
    </div>

    <div style="flex-basis: 33%; flex-shrink:1; flex-grow:0">
        @if (isLoading)
        {
            <p>Loading orders…</p>
        }
        else
        {
            <div style="display:flex; justify-content:space-between; align-items: center">
                <p mb-0>Untaken orders (no assigned persons): @UntakenOrders.Count()</p>
                <div style="display:flex; align-items:center; gap: 5px;">
                    <TelerikCheckBox Size="lg" OnChange="@DisplayOrders" Id="OrdersCheckBox" @bind-Value="@isCBAllOrdersSelected" />
                    <label for="OrdersCheckBox">show completed orders </label>
                </div>
            </div>
            <TelerikTooltip TargetSelector=".tooltip-target" Width="300px"/>
            <TelerikGrid TItem="WorkOrder"
                         Data="@UntakenOrders"
                         RowDraggable="true"
                         OnRowDrop="@GridRowDrop"
                         Sortable="true"
                         Height="80vh"
                         FilterMode="@GridFilterMode.FilterMenu"
                         OnRowDoubleClick="@OnRowClick">

                <RowTemplate Context="order">
                    <td class="tooltip-target" title="@order.WODesc">@order?.AssetNo</td>
                    <td class="tooltip-target" title="@order.WODesc">@order?.WOCategory</td>
                    <td class="tooltip-target" title="@order.AddDate">@order?.AddDate?.ToString("dd/MM/yyyy HH:mm")</td>
                    @* <td class="tooltip-target" title="@order.WODesc">@order?.StartDate</td>
                    <td class="tooltip-target" title="@order.WODesc">@order?.EndDate</td> *@
                    <td class="state-@order?.StateColor?.TrimStart('#') tooltip-target" title="@order?.WOState">@order?.WOState</td>
                </RowTemplate>

                <GridSettings>
                    <GridRowDraggableSettings DragClueField="@nameof(WorkOrder.WorkOrderID)" />
                </GridSettings>
                
                
                <GridColumns>
                    <GridColumn Field="@nameof(WorkOrder.AssetNo)" />
                    <GridColumn Field="@nameof(WorkOrder.WOCategory)"/>
                    <GridColumn Field="@nameof(WorkOrder.AddDate)" />
                    @* <GridColumn Field="@nameof(WorkOrder.StartDate)" />
                    <GridColumn Field="@nameof(WorkOrder.EndDate)" /> *@
                    <GridColumn Field="@nameof(WorkOrder.WOState)" />
                </GridColumns>

            </TelerikGrid>
        }
    </div>
</div>

<TelerikWindow Modal="false" MinWidth="1200px" MaxHeight="95vh" Visible="@customEditFormShown" ThemeColor="@ThemeConstants.Window.ThemeColor.Dark">
    <WindowTitle>Appointment #@CurrentAppointment.WorkOrderID</WindowTitle>
    <WindowActions>
        <WindowAction Name="Close" OnClick="@CancelEditing" />
    </WindowActions>
    <WindowContent>
        <AppointmentEditor Appointment="@CurrentAppointment" 
            isEditable=true 
            ListPersons=@Persons 
            ListDepartments="@Departments" 
            ListDicts="@ListDicts"
            OnAppointmentChanged="@RefreshData" />
    </WindowContent>
</TelerikWindow>

<TelerikWindow Modal="false" MinWidth="1200px" MaxHeight="95vh" Visible="@isOrderCardOpen" ThemeColor="@ThemeConstants.Window.ThemeColor.Dark">
    <WindowTitle>WorkOrder #@CurrentOrder.WorkOrderID</WindowTitle>
    <WindowActions>
        <WindowAction Name="Close" OnClick="@CancelEditing" />
    </WindowActions>
    <WindowContent>
        <WorkOrderComponent WorkOrder="@CurrentOrder" />
    </WindowContent>
</TelerikWindow>

@code {



    private List<SchedulerAppointment> Appointments { get; set; } = new();    
    private List<SchedulerAppointment> _allAppointments { get; set; } = new();    
    private TelerikScheduler<SchedulerAppointment>? SchedulerRef { get; set; }

    private DateTime SchedulerDate { get; set; } = DateTime.Today;
    private SchedulerView CurrentView { get; set; } = SchedulerView.Month;
    private DateTime DayStart => DateTime.Today.AddHours(7);
    private DateTime DayEnd => DateTime.Today.AddHours(20);
    private MarkupString cellStyles = new MarkupString(); //for rows colors
    private List<WorkOrder> UntakenOrders { get; set; } = new();
    private List<WorkOrder> TakenOrders { get; set; } = new();
    private List<WorkOrder> _allOrders = new();
    private bool isLoading { get; set; } = true;
    private bool customEditFormShown { get; set; } = false;
    private bool isOrderCardOpen = false;
    private SchedulerAppointment CurrentAppointment { get; set; } = new SchedulerAppointment();
    private WorkOrder CurrentOrder { get; set; }
    private List<string> selectedAssignedPersons = new();
    private List<string> Persons = new();
    private List<string> Departments = new(); 
    private List<Dict> ListDicts = new();
    private string selectedDepartment = "All";
    private bool isCBAllOrdersSelected = false; //show executed orders in grid
    private List<string?> DeviceCategories = new();//for Orders grid filter
    private string selectedCategory = "All";
    private List<string> AssetNumbers = new();
    private string selectedAssetNo = "All";
    private List<Resource> statuses = new List<Resource>
    {
        new Resource { Text = "Not starded", Value = "Red", Color = "LightCoral" },
        new Resource { Text = "In Progress", Value = "Yellow", Color = "LightYellow" },
        new Resource { Text = "Completed", Value = "Lime", Color = "LightGreen" },
    };

    protected override async Task OnInitializedAsync()
    {
        var isWASM = JSRuntime is IJSInProcessRuntime;
        Console.WriteLine($"--- Initialized SCHEDULER PAGE. WASM = {isWASM}");
        await HardLoadData();
    }

    private async Task HardLoadData()
    {
        Console.WriteLine("--- HardLoadData called.");
        isLoading = true;
        StateHasChanged();
        Persons = (await apiService.GetAllPersons()).Select(c => c.Name).ToList(); //TODO remove while made cache persons
        _allOrders = await apiService.GetWorkOrdersAsync(); //from API, not cache
        await LoadData();

        Console.WriteLine($"--- HardLoadData completed. UntakenOrders count: {UntakenOrders.Count}, Appointments count: {Appointments.Count}");
    }

    private async Task LoadData()
    {
        Console.WriteLine("--- LoadData called.");
        isLoading = true;
        StateHasChanged();
        //Persons = (await apiService.GetAllPersons()).Select(c => c.Name).ToList();
        ListDicts = (await apiService.GetWODictionaries(1));
        _allOrders = await apiService.GetWorkOrdersCachedAsync();
        _allAppointments = await ApptService.GetTakenAppointments(_allOrders);
        Departments = new List<string> { "All" };
        Departments.AddRange(_allOrders.Where(d => !string.IsNullOrWhiteSpace(d.DepName)).Select(x => x.DepName).Distinct().ToList());
        DeviceCategories = new List<string?> { "All" };
        DeviceCategories.AddRange(_allOrders.Select(x => x.DeviceCategory).Where(c => !string.IsNullOrWhiteSpace(c)).Distinct());
        AssetNumbers = new List<string> { "All" };
        AssetNumbers.AddRange(_allOrders.Where(d => !string.IsNullOrWhiteSpace(d.AssetNo)).Select(x => x.AssetNo).Distinct().ToList());
        DisplayAppointments(); 
        DisplayOrders();
        isLoading = false;
        StateHasChanged();
        Console.WriteLine($"--- LoadData completed. UntakenOrders count: {UntakenOrders.Count}, Appointments count: {Appointments.Count}");
    }

    /// <summary>
    /// Displays the appointments in the scheduler, filtering by selected assigned persons and department.
    /// </summary>
    private void DisplayAppointments()
    {
        var appointments = FilterAppointments();
        // selectedAssignedPersons = appointments
        //     .Where(x => !string.IsNullOrEmpty(x.AssignedPerson))
        //     .Select(x => x.AssignedPerson)
        //     .Distinct()
        //     .ToList();
        Appointments = appointments;        
    }

    /// <summary>
    /// Displays the work orders in the grid, filtering by selected category and state.
    /// </summary>
    private void DisplayOrders()
    {
        var orders = FilterOrders();
        UntakenOrders = orders.Where(x => string.IsNullOrEmpty(x.AssignedPerson) &&
        (selectedCategory == "All" || x.DeviceCategory == selectedCategory) &&
        (x.WOState?.ToLowerInvariant() != "zakończony") || isCBAllOrdersSelected).ToList();
        cellStyles = RenderStatesStyle(orders);
    }




    // ==== DragAndDrop from Grid to Scheduler ====
    private async Task GridRowDrop(GridRowDropEventArgs<WorkOrder> args)
    {
        if (args.DestinationComponentId == "Scheduler1" && SchedulerRef != null)
        {
            var slot = SchedulerRef.GetTimeSlotFromDropIndex(args.DestinationIndex);
            foreach (var wo in args.Items)
            {
                var newscheduler = new SchedulerAppointment(wo);
                newscheduler.Start = slot.Start;
                newscheduler.End = slot.End;
                newscheduler.IsAllDay = slot.IsAllDay;
                newscheduler.TakeDate = slot.Start;
                Appointments.Add(newscheduler);
                UntakenOrders.Remove(wo);
                await ApptService.UpdateAppointment(newscheduler);
            }

            SchedulerRef.Rebind();
        }
    }

    #region filters
    private void OnAssignedPersonsClosed()
    {
        DisplayAppointments();
    }

    private void OnDepartmentChanged(string dep)
    {
        selectedDepartment = dep ?? "All";
        DisplayAppointments();
    }

    private void OnAssetNoChanged(string assetNo)
    {
        selectedAssetNo = assetNo ?? "All";
        DisplayAppointments();
    }

    private void OnCategoryChanged(string cat)
    {
        selectedCategory = cat ?? "All"; 
        DisplayOrders();
    }

    private void OnPersonSelectChanged(object args)
    {
        DisplayAppointments();
    }

    private List<SchedulerAppointment> FilterAppointments()
    {
        var filteredAppointments = new List<SchedulerAppointment>(_allAppointments);
        if (!string.IsNullOrEmpty(selectedDepartment) && selectedDepartment != "All")
        {
            // Filter appointments based on the selected department
            filteredAppointments = filteredAppointments.Where(a => a.DepName == selectedDepartment).ToList();
        }
        if (!string.IsNullOrEmpty(selectedAssetNo) && selectedAssetNo != "All")
        {
            // Filter appointments based on the selected asset number
            filteredAppointments = filteredAppointments.Where(a => a.AssetNo == selectedAssetNo).ToList();
        }
        if (selectedAssignedPersons.Count > 0)
        {
            // Filter appointments based on the selected assigned persons
            filteredAppointments = filteredAppointments.Where(a => selectedAssignedPersons.Contains(a.AssignedPerson)).ToList();
        }


        return filteredAppointments; 
    }

    private List<WorkOrder> FilterOrders()
    {
        return _allOrders; // Return all orders if no filtering is applied
    }

    #endregion

    #region Scheduler 
    // ==== Scheduler CUD handlers ====
    private async Task OnCreateAppointment(SchedulerCreateEventArgs args)
    {

        if (args.Item is SchedulerAppointment newAppt && SchedulerRef != null)
        {
            Appointments.Add(newAppt);
            await ApptService.UpdateAppointment(newAppt);
            SchedulerRef.Rebind();
        }
    }

    private async Task OnUpdateAppointment(SchedulerUpdateEventArgs args)
    {
        if (args.Item is SchedulerAppointment updAppt)
        {
            var ind = Appointments.FindIndex(a => a.AppointmentId == updAppt.AppointmentId);
            if (ind >= 0)
            {
                Appointments[ind] = updAppt.ShallowCopy(); 
                await ApptService.UpdateAppointment(Appointments[ind]);
                SchedulerRef?.Rebind();
            }
        }
    }

    private async Task OnDeleteAppointment(SchedulerDeleteEventArgs args)
    {
        if (args.Item is SchedulerAppointment delAppt)
        {
            //TODO not delete Order, but change status(Assigned Person, Date...)
            await ApptService.DeleteAppointment(delAppt); // Delete from service
            Appointments.RemoveAll(a => a.AppointmentId == delAppt.AppointmentId);
            SchedulerRef?.Rebind();
        }
    }

    private void OnDateClick(int day)
    {
        // var currentDate = DateTime.Now;
        // var navigateDate = new DateTime(currentDate.Year, currentDate.Month, day);

        // CurrView = SchedulerView.Day;
        // SelectedDate = navigateDate;
    }

    async void RefreshData(SchedulerAppointment editedAppointment)
    {
        if (editedAppointment == null)//was removed
        {

        }
        customEditFormShown = false;
        isOrderCardOpen = false;
        //await LoadData();
        SchedulerRef?.Rebind();
    }

    void EditHandler(SchedulerEditEventArgs args)
    {
        args.IsCancelled = true;//prevent built-in edit form from showing up
        SchedulerAppointment item = args.Item as SchedulerAppointment;
        customEditFormShown = true;
        if (!args.IsNew) // an edit operation, otherwise - an insert operation
        {
            //copying is implemented in the appointment model and it is needed because
            //this is a reference to the data collection so modifying it directly
            //will immediately modify the data and no cancelling will be possible
            CurrentAppointment = item;//.ShallowCopy();
        }
        else
        {
            CurrentAppointment = new SchedulerAppointment() { Start = args.Start, End = args.End, IsAllDay = args.IsAllDay };
        }
    }

    void CancelEditing()
    {
        //TODO undo changes if any
        customEditFormShown = false;
        isOrderCardOpen = false;
    }


    #endregion    

    #region Grid Row Styles

    void OnRowRenderHandler(GridRowRenderEventArgs args)
    {
        // var item = args.Item as WorkOrder;

        // args.Class += "state-" + item?.StateColor.TrimStart('#')+
        // " tooltip-target";

    }
    void OnRowClick(GridRowClickEventArgs args)
    {
        var item = args.Item as WorkOrder;
        if (item != null)
        {
            CurrentOrder = item;
            isOrderCardOpen = true;
            StateHasChanged();
        }
    }
    #endregion

    private string GenerateItemText(SchedulerAppointment meeting)
    {
        return $"[{meeting?.AppointmentId}] {meeting?.AssetNo} => {(string.IsNullOrEmpty(meeting?.DepName) ? "" : meeting?.DepName + ":")} {meeting?.AssignedPerson}";
    }

    private MarkupString RenderStatesStyle(List<WorkOrder> orders)
    {
        var uniqueColors = orders
           .Select(o => o.StateColor)
           .Where(c => !string.IsNullOrWhiteSpace(c))
           .Distinct();

        var sb = new StringBuilder();
        sb.AppendLine("<style>");
        foreach (var color in uniqueColors)
        {
            var safeName = color.TrimStart('#');
            switch (safeName.ToLowerInvariant())
            {
                case "lime":
                    safeName = "LightGreen";
                    break;
                case "red":
                    safeName = "LightCoral";
                    break;
                case "yellow":
                    safeName = "LightYellow";
                    break;
                default:
                    break;
            }
            sb.AppendLine($".state-{color} {{");
            sb.AppendLine($"    background-color: {safeName};");
            sb.AppendLine("}");
        }
        sb.AppendLine("</style>");

        return new MarkupString(sb.ToString());
    }
    public class Resource
    {
        // these are the default field names
        public string Text { get; set; }
        public string Value { get; set; }
        public string Color { get; set; } // must be a valid CSS string
    }
}
