@page "/scheduler"

@using System.Linq
@using BlazorTool.Client.Models
@using BlazorTool.Client.Services
@using System.Text
@using Telerik.Blazor.Components
@using Telerik.Blazor.Components.Scheduler
@using Telerik.DataSource.Extensions

@inject ApiServiceClient apiService
@rowStyles
<h3>Scheduler</h3>

<div style="display:flex; gap:1rem;">
    <div style="flex:2;">
        <TelerikScheduler TItem="SchedulerAppointment"
                          Id="Scheduler1"
                          Data="@Appointments"
                          @ref="SchedulerRef"
                          @bind-Date="SchedulerDate"
                          @bind-View="CurrentView"
                          AllowCreate="true"
                          AllowUpdate="true"
                          AllowDelete="true"
                          OnCreate="@OnCreateAppointment"
                          OnUpdate="@OnUpdateAppointment"
                          OnDelete="@OnDeleteAppointment"
                          IdField="Id"
                          StartField="Start"
                          EndField="End"
                          TitleField="Title"
                          DescriptionField="Description"
                          IsAllDayField="IsAllDay">
            <SchedulerViews>
                <SchedulerDayView StartTime="@DayStart" EndTime="@DayEnd" />
                <SchedulerWeekView StartTime="@DayStart" EndTime="@DayEnd" />
                <SchedulerMonthView />
            </SchedulerViews>
        </TelerikScheduler>
    </div>

    <div style="flex:1;">
        @if (isLoading)
        {
            <p>Loading orders…</p>
        }
        else
        {
            <TelerikGrid TItem="WorkOrder"
                         Data="@UntakenOrders"
                         RowDraggable="true"
                         OnRowDrop="@GridRowDrop"
                         Sortable="true"
                         OnRowRender="@OnRowRenderHandler">
                <GridSettings>
                    <GridRowDraggableSettings DragClueField="@nameof(WorkOrder.WorkOrderID)" />
                </GridSettings>
                <GridColumns>
                    <GridColumn Field="@nameof(WorkOrder.AssetNo)" Title="Asset No" />
                    <GridColumn Field="@nameof(WorkOrder.AssignedPerson)"/>
                    <GridColumn Field="@nameof(WorkOrder.StartDate)" Title="Start Date" />
                    <GridColumn Field="@nameof(WorkOrder.EndDate)" Title="End Date" />
                    <GridColumn Field="@nameof(WorkOrder.WOState)" />
                </GridColumns>
            </TelerikGrid>
        }
    </div>
</div>

@code {

    private List<SchedulerAppointment> Appointments { get; set; } = new();
    private TelerikScheduler<SchedulerAppointment>? SchedulerRef { get; set; }

    private DateTime SchedulerDate { get; set; } = DateTime.Today;
    private SchedulerView CurrentView { get; set; } = SchedulerView.Week;
    private DateTime DayStart => DateTime.Today.AddHours(8);
    private DateTime DayEnd => DateTime.Today.AddHours(18);
    private MarkupString rowStyles = new MarkupString(); //for rows colors
    private List<WorkOrder> UntakenOrders { get; set; } = new();
    private List<WorkOrder> TakenOrders { get; set; } = new();
    private bool isLoading { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        var orders = (await apiService.GetWorkOrdersCachedAsync()); //Nie rozpoczete zlecenia
        UntakenOrders = orders.Where(x => x.TakeDate == null).ToList();
        TakenOrders = orders.Where(x => x.TakeDate != null).ToList();
        Appointments = ConvertOrdersToAppointments(TakenOrders);
        isLoading = false;
    }

    // ==== DragAndDrop from Grid to Scheduler ====
    private Task GridRowDrop(GridRowDropEventArgs<WorkOrder> args)
    {
        if (args.DestinationComponentId == "Scheduler1" && SchedulerRef != null)
        {
            var slot = SchedulerRef.GetTimeSlotFromDropIndex(args.DestinationIndex);
            foreach (var wo in args.Items)
            {
                Appointments.Add(new SchedulerAppointment
                {
                    Id = wo.WorkOrderID.ToString(),
                    Title = wo.AssetNo ?? $"WO {wo.WorkOrderID}",
                    Start = slot.Start,
                    End = slot.End,
                    IsAllDay = slot.IsAllDay,
                    Description = wo.WODesc ?? string.Empty
                });
            }
            SchedulerRef.Rebind();
        }
        return Task.CompletedTask;
    }

    // ==== Scheduler CUD handlers ====
    private Task OnCreateAppointment(SchedulerCreateEventArgs args)
    {
        if (args.Item is SchedulerAppointment newAppt && SchedulerRef != null)
        {
            Appointments.Add(newAppt);
            SchedulerRef.Rebind();
        }
        return Task.CompletedTask;
    }

    private Task OnUpdateAppointment(SchedulerUpdateEventArgs args)
    {
        if (args.Item is SchedulerAppointment updAppt)
        {
            var ex = Appointments.FirstOrDefault(a => a.Id == updAppt.Id);
            if (ex != null)
            {
                ex.Title = updAppt.Title;
                ex.Start = updAppt.Start;
                ex.End = updAppt.End;
                ex.Description = updAppt.Description;
                ex.IsAllDay = updAppt.IsAllDay;
                SchedulerRef?.Rebind();
            }
        }
        return Task.CompletedTask;
    }

    private Task OnDeleteAppointment(SchedulerDeleteEventArgs args)
    {
        if (args.Item is SchedulerAppointment delAppt)
        {
            Appointments.RemoveAll(a => a.Id == delAppt.Id);
            SchedulerRef?.Rebind();
        }
        return Task.CompletedTask;
    }

    private List<SchedulerAppointment> ConvertOrdersToAppointments(List<WorkOrder> orders)
    {
        var appointments = new List<SchedulerAppointment>();
        foreach (var order in orders)
            appointments.Add(new SchedulerAppointment(order));

        return appointments;
    }

    #region Grid Row Styles
    void OnRowRenderHandler(GridRowRenderEventArgs args)
    {
        var item = args.Item as WorkOrder;

        args.Class += "state-" + item?.StateColor.TrimStart('#');
    }

    private MarkupString RenderStatesStyle(List<WorkOrder> orders)
    {
        var uniqueColors = orders
           .Select(o => o.StateColor)
           .Where(c => !string.IsNullOrWhiteSpace(c))
           .Distinct();

        var sb = new StringBuilder();
        sb.AppendLine("<style>");
        foreach (var color in uniqueColors)
        {
            var safeName = color.TrimStart('#');
            switch (safeName.ToLowerInvariant())
            {
                case "lime":
                    safeName = "LightGreen";
                    break;
                case "red":
                    safeName = "LightCoral";
                    break;
                case "yellow":
                    safeName = "LightYellow";
                    break;
                default:
                    break;
            }
            sb.AppendLine($".k-grid .k-master-row.state-{color} {{");
            sb.AppendLine($"    background-color: {safeName};");
            sb.AppendLine("}");
        }
        sb.AppendLine("</style>");

        return new MarkupString(sb.ToString());
    }
    #endregion
}
