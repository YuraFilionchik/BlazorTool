@page "/scheduler"

@using BlazorTool.Client.Models
@using BlazorTool.Client.Services
@using System.Text
@inject BlazorTool.Client.Services.ApiServiceClient apiService
@rowStyles

<h3>Scheduler</h3>
<div style="display: flex; gap: 10px;">
    <div style="flex: 1;">
        <TelerikScheduler Data="@AppointmentsScheduler"
                          @bind-Date="@SchedulerStartDate"
                          @bind-View="@SchedulerCurrentView"
                          @ref="@SchedulerRef"
                          OnUpdate="@UpdateAppointment"
                          OnCreate="@AddAppointment"
                          OnDelete="@DeleteAppointment"
                          ConfirmDelete="true"
                          AllowCreate="true"
                          AllowDelete="true"
                          AllowUpdate="true"
                          Id="Scheduler1">
            <SchedulerViews>
                <SchedulerDayView StartTime="@DayStart" EndTime="@DayEnd" />
                <SchedulerWeekView StartTime="@DayStart" EndTime="@DayEnd" />
                <SchedulerMonthView />
                <SchedulerTimelineView ColumnWidth=30 NumberOfDays=2 StartTime="@DayStart" EndTime="@DayEnd" />
            </SchedulerViews>
        </TelerikScheduler>
    </div>
    <div style="flex: 1;">
        @if (isOrdersLoading)
        {
            <div>data loading...</div>
        }
        else
        {
            <TelerikGrid Data="@OrdersForGrid"
                     Id="Grid1"
                     
                     RowDraggable="true"
                     @ref="@GridRef"
                         Sortable="true"
                         Pageable="true"
                         PageSize="12"
                         OnRowRender="@OnRowRenderHandler"
                     OnRowDrop="@((GridRowDropEventArgs<WorkOrder> args) => GridRowDrop(args))">
            <GridSettings>
                <GridRowDraggableSettings DragClueField="@nameof(WorkOrder.WorkOrderID)"></GridRowDraggableSettings>
            </GridSettings>
            <GridColumns>
                <GridColumn Field="@nameof(WorkOrder.WorkOrderID)" Editable="false" Visible="false"></GridColumn>
                <GridColumn Field="@nameof(WorkOrder.DepName)" Title="DepName"></GridColumn>
                <GridColumn Field="@nameof(WorkOrder.DeviceCategory)"></GridColumn>
                <GridColumn Field="@nameof(WorkOrder.WOReason)"></GridColumn>
                <GridColumn Field="@nameof(WorkOrder.ModPerson)"></GridColumn>
                <GridColumn Field="@nameof(WorkOrder.WOState)"></GridColumn>
                <GridColumn Field="@nameof(WorkOrder.WOLevel)"></GridColumn>
                <GridColumn Field="@nameof(WorkOrder.AssignedPerson)" Title="AssignedPerson"></GridColumn>
                <GridColumn Field="@nameof(WorkOrder.AddDate)" ></GridColumn>
                <GridColumn Field="@nameof(WorkOrder.StartDate)" Title="Start Date"></GridColumn>
                <GridColumn Field="@nameof(WorkOrder.EndDate)" Title="End Date"></GridColumn> 
                <GridColumn Field="@nameof(WorkOrder.CloseDate)"></GridColumn>
            </GridColumns>
        </TelerikGrid>
        }
        
    </div>
</div>

@code {
    private DateTime DayStart { get; set; } = DateTime.Today.AddHours(7);
    private DateTime DayEnd { get; set; } = DateTime.Today.AddHours(18);
    private DateTime SchedulerStartDate { get; set; } = DateTime.Now;
    private SchedulerView SchedulerCurrentView { get; set; } = SchedulerView.Week;
    private List<SchedulerAppointment> AppointmentsScheduler = new List<SchedulerAppointment>();
    private List<WorkOrder> OrdersForGrid = new List<WorkOrder>();
    public TelerikGrid<WorkOrder> GridRef { get; set; }
    public TelerikScheduler<SchedulerAppointment> SchedulerRef { get; set; }
    public AppointmentService appointmentServiceScheduler = new AppointmentService();
    private bool isOrdersLoading = false;
    private List<Device> devices = new List<Device>();
    private Device selectedDevice = new Device();
    private MarkupString rowStyles = new MarkupString();

    public class SchedulerAppointment
    {
        public string Title { get; set; }
        public string Id { get; set; } = Guid.NewGuid().ToString();
        public DateTime Start { get; set; }
        public DateTime End { get; set; }
        public bool IsAllDay { get; set; }
        public string Description { get; set; } = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        AppointmentsScheduler = appointmentServiceScheduler.GetAllAppointments();

        isOrdersLoading = true;
        StateHasChanged(); 
        devices = await apiService.GetAllDevicesCachedAsync(); 
        if (selectedDevice == null && devices.Count > 0)
        {
            selectedDevice = devices.First();
        }
        else if (selectedDevice != null && !devices.Any(d => d.MachineID == selectedDevice.MachineID))
        {
            selectedDevice = devices.First();
        }
        OrdersForGrid = await apiService.GetWorkOrdersCachedAsync(selectedDevice?.MachineID ?? 1) ; 
        rowStyles = RenderStatesStyle(OrdersForGrid);
        isOrdersLoading = false;
        StateHasChanged(); 
    }

    #region Grid
    void OnRowRenderHandler(GridRowRenderEventArgs args)
    {
        var item = args.Item as WorkOrder;

        args.Class += "state-" + item.StateColor.TrimStart('#'); 
    }

    private MarkupString RenderStatesStyle(List<WorkOrder> orders)
    {
        var uniqueColors = orders
           .Select(o => o.StateColor)
           .Where(c => !string.IsNullOrWhiteSpace(c))
           .Distinct();

        var sb = new StringBuilder();
        sb.AppendLine("<style>");
        foreach (var color in uniqueColors)
        {
            var safeName = color.TrimStart('#');
            sb.AppendLine($".k-grid .k-master-row.state-{safeName} {{");
            sb.AppendLine($"    background-color: {color};");
            sb.AppendLine("}");
        }
        sb.AppendLine("</style>");

        return new MarkupString(sb.ToString());
    }
    #endregion
    private void GridRowDrop(GridRowDropEventArgs<WorkOrder> args)
    {
        // foreach (var item in args.Items)
        // {
        //     appointmentServiceGrid.DeleteAppointment(item.Id);
        //     AppointmentsGrid = appointmentServiceGrid.GetAllAppointments();
        // }

        // if (args.DestinationComponentId == "Scheduler1")
        // {
        //     foreach (var item in args.Items)
        //     {
        //         DropAppointment(args.DestinationIndex, item);
        //     }

        //     SchedulerRef.Rebind();
        // }
        // else if (args.DestinationComponentId == "Grid1")
        // {
        //     InsertItemsIntoGrid(args.Items, args.DestinationItem, args.DropPosition);
        // }
    }

    private void DropAppointment(string index, SchedulerAppointment item)
    {
        var slot = SchedulerRef.GetTimeSlotFromDropIndex(index);

        var appointment = item;
        appointment.Start = slot.Start;
        appointment.IsAllDay = slot.IsAllDay;
        appointment.End = slot.End;

        appointmentServiceScheduler.AddAppointment(appointment);

    }

    private void InsertItemsIntoGrid(IEnumerable<WorkOrder> items, WorkOrder destinationItem, GridRowDropPosition dropPosition)
    {
        var destinationIndex = 0;
        if (destinationItem != null)
        {
            destinationIndex = OrdersForGrid.IndexOf(destinationItem);
            if (dropPosition == GridRowDropPosition.After)
            {
                destinationIndex += 1;
            }
        }

        OrdersForGrid.InsertRange(destinationIndex, items);
    }

    async Task UpdateAppointment(SchedulerUpdateEventArgs args)
    {
        appointmentServiceScheduler.UpdateAppointment((SchedulerAppointment)args.Item);
        // Rebind the scheduler to reflect the changes
        SchedulerRef.Rebind();
    }

    async Task AddAppointment(SchedulerCreateEventArgs args)
    {
        appointmentServiceScheduler.AddAppointment((SchedulerAppointment)args.Item);
        SchedulerRef.Rebind();
    }

    async Task DeleteAppointment(SchedulerDeleteEventArgs args)
    {
        appointmentServiceScheduler.DeleteAppointment(((SchedulerAppointment)args.Item).Id);
        SchedulerRef.Rebind();
    }


}

