@page "/scheduler"

@using System.Linq
@using BlazorTool.Client.Models
@using BlazorTool.Client.Services
@using BlazorTool.Client.Components
@using System.Text
@using System.Diagnostics
@using Telerik.Blazor.Components
@using Telerik.Blazor.Components.Scheduler
@using Telerik.DataSource.Extensions
@inject IJSRuntime JSRuntime

@inject ApiServiceClient apiService
@inject AppointmentService ApptService

@cellStyles
<h3>Scheduler</h3>
<div class="filter-controls-row">
    <div>
        <TelerikMultiSelect Data="@allPersons"
                            @bind-Value="@selectedAssignedPersons"
                            TagMode="@MultiSelectTagMode.Multiple"
                            Placeholder="Select assigned persons"
                            AutoClose="false"
                            OnChange="@OnMultiValueClosed"
                            Width="400px"
                            ShowClearButton="true">
        </TelerikMultiSelect>
    </div>
    @* <div>
        <TelerikComboBox Data="@deviceCategories" TextField="DeviceCategory"
                         Placeholder="Select category..." ShowClearButton="true" Filterable="true"
                         ValueChanged="@((string cat) => OnCategoryChanged(cat))">
        </TelerikComboBox>
    </div>
    <div>
        <TelerikComboBox Data="@deviceTypes" TextField="DeviceType"
                         Placeholder="Select type..." ShowClearButton="true" Filterable="true"
                         ValueChanged="@((string cat) => OnTypeChanged(cat))">
        </TelerikComboBox>
    </div> *@
</div>
<div style="display:flex; gap:1rem;">
    <div style="flex:2;">
        <div style="display:flex; flex-direction: row; gap:10px">
            <div><p>Scheduled orders: @Appointments.Count()</p></div>
            <div><TelerikButton OnClick="@HardLoadData" Size="Small" ThemeColor="@ThemeConstants.Button.ThemeColor.Tertiary">Reload all data</TelerikButton></div>
        </div>
        
        <TelerikScheduler TItem="SchedulerAppointment"
                          Id="Scheduler1"
                          Data="@Appointments"
                          @ref="SchedulerRef"
                          @bind-Date="SchedulerDate"
                          @bind-View="CurrentView"
                          AllowCreate="true"
                          AllowUpdate="true"
                          AllowDelete="true"
                          OnCreate="@OnCreateAppointment"
                          OnUpdate="@OnUpdateAppointment"
                          OnDelete="@OnDeleteAppointment"
                          OnEdit="@EditHandler"
                          IdField="Id"
                          StartField="Start"
                          EndField="End"
                          TitleField="Title"
                          DescriptionField="Description"
                          IsAllDayField="IsAllDay"
                          Height="80vh"
                          >

            <SchedulerViews>
                <SchedulerDayView StartTime="@DayStart" EndTime="@DayEnd" />
                <SchedulerWeekView StartTime="@DayStart" EndTime="@DayEnd" />
                <SchedulerMonthView ItemsPerSlot=4>
                   
                </SchedulerMonthView>
            </SchedulerViews>
        </TelerikScheduler>
    </div>

    <div style="flex:1;">
        @if (isLoading)
        {
            <p>Loading orders…</p>
        }
        else
        {
            <p>Untaken orders: @UntakenOrders.Count()</p>
            <TelerikTooltip TargetSelector=".tooltip-target" Width="300px"/>
            <TelerikGrid TItem="WorkOrder"
                         Data="@UntakenOrders"
                         RowDraggable="true"
                         OnRowDrop="@GridRowDrop"
                         Sortable="true"
                         Height="80vh"
                         
            >

                <RowTemplate Context="order">
                    <td class="tooltip-target" title="@order.WODesc">@order?.AssetNo</td>
                    <td class="tooltip-target" title="@order.WODesc">@order?.WOCategory</td>
                    <td class="tooltip-target" title="@order.WODesc">@order?.AssignedPerson</td>
                    <td class="tooltip-target" title="@order.WODesc">@order?.StartDate</td>
                    <td class="tooltip-target" title="@order.WODesc">@order?.EndDate</td>
                    <td class="state-@order?.StateColor?.TrimStart('#') tooltip-target" title="@order?.WOState">@order?.WOState</td>
                </RowTemplate>

                <GridSettings>
                    <GridRowDraggableSettings DragClueField="@nameof(WorkOrder.WorkOrderID)" />
                </GridSettings>
                
                
                <GridColumns>
                    <GridColumn Field="@nameof(WorkOrder.AssetNo)" />
                    <GridColumn Field="@nameof(WorkOrder.WOCategory)"/>
                    <GridColumn Field="@nameof(WorkOrder.AssignedPerson)" />
                    <GridColumn Field="@nameof(WorkOrder.StartDate)" />
                    <GridColumn Field="@nameof(WorkOrder.EndDate)" />
                    <GridColumn Field="@nameof(WorkOrder.WOState)" />
                </GridColumns>

            </TelerikGrid>
        }
    </div>
</div>

<TelerikWindow Modal="false" Visible="@CustomEditFormShown" ThemeColor="@ThemeConstants.Window.ThemeColor.Dark">
    <WindowTitle>Work Order #@CurrentAppointment.WorkOrderID</WindowTitle>
    <WindowActions>
        <WindowAction Name="Close" OnClick="@CancelEditing" />
    </WindowActions>
    <WindowContent>
        <AppointmentEditor Appointment="@CurrentAppointment" OnAppointmentChanged="@RefreshData" />
        <br />
        <WorkOrderComponent WorkOrderId="@CurrentAppointment.WorkOrderID" WorkOrder="@CurrentAppointment" />
    </WindowContent>
</TelerikWindow>

@code {

    private List<SchedulerAppointment> Appointments { get; set; } = new();
    private TelerikScheduler<SchedulerAppointment>? SchedulerRef { get; set; }

    private DateTime SchedulerDate { get; set; } = DateTime.Today;
    private SchedulerView CurrentView { get; set; } = SchedulerView.Month;
    private DateTime DayStart => DateTime.Today.AddHours(8);
    private DateTime DayEnd => DateTime.Today.AddHours(18);
    private MarkupString cellStyles = new MarkupString(); //for rows colors
    private List<WorkOrder> UntakenOrders { get; set; } = new();
    private List<WorkOrder> TakenOrders { get; set; } = new();
    private List<WorkOrder> _allOrders = new();
    private bool isLoading { get; set; } = true;
    private bool CustomEditFormShown { get; set; } = false;
    private SchedulerAppointment CurrentAppointment { get; set; } = new SchedulerAppointment();
    private List<string> selectedAssignedPersons = new();
    private List<string> allPersons = new();

    protected override async Task OnInitializedAsync()
    {
        var isWASM = JSRuntime is IJSInProcessRuntime;
        Debug.Print($"--- OnInitializedAsync. WASM = {isWASM}");
        await LoadData();
    }

    private async Task HardLoadData()
    {
        Debug.Print("--- HardLoadData called.");
        isLoading = true;
        StateHasChanged();
        _allOrders = await apiService.GetWorkOrdersAsync(); 
        await DisplayAppointments(_allOrders);
        isLoading = false;
        StateHasChanged();
        Debug.Print($"--- HardLoadData completed. UntakenOrders count: {UntakenOrders.Count}, Appointments count: {Appointments.Count}");
    }
    private async Task LoadData()
    {
        isLoading = true;
        StateHasChanged();
        allPersons = (await apiService.GetAllPersons()).Select(c => c.Name).ToList();
        _allOrders = await apiService.GetWorkOrdersCachedAsync();
        await DisplayAppointments( _allOrders); 
        DisplayOrders(_allOrders);
        isLoading = false;
        StateHasChanged();
        Debug.Print($"--- LoadData completed. UntakenOrders count: {UntakenOrders.Count}, Appointments count: {Appointments.Count}");
    }

    private async Task DisplayAppointments(List<WorkOrder> orders)
    {
        selectedAssignedPersons = orders
            .Where(x => !string.IsNullOrEmpty(x.AssignedPerson))
            .Select(x => x.AssignedPerson)
            .Distinct()
            .ToList();
        Appointments = await ApptService.GetTakenAppointments(orders);
    }


    private void DisplayOrders(List<WorkOrder> orders)
    {
        UntakenOrders = orders.Where(x => string.IsNullOrEmpty(x.AssignedPerson) && x.WOState?.ToLowerInvariant() != "zakończony").ToList();
        cellStyles = RenderStatesStyle(orders);
    }




    // ==== DragAndDrop from Grid to Scheduler ====
    private async Task GridRowDrop(GridRowDropEventArgs<WorkOrder> args)
    {
        if (args.DestinationComponentId == "Scheduler1" && SchedulerRef != null)
        {
            var slot = SchedulerRef.GetTimeSlotFromDropIndex(args.DestinationIndex);
            foreach (var wo in args.Items)
            {
                var newscheduler = new SchedulerAppointment(wo);
                newscheduler.Start = slot.Start;
                newscheduler.End = slot.End;
                newscheduler.IsAllDay = slot.IsAllDay;
                newscheduler.TakeDate = slot.Start;
                Appointments.Add(newscheduler);
                UntakenOrders.Remove(wo);
                await ApptService.UpdateAppointment(newscheduler);
            }

            SchedulerRef.Rebind();
        }
    }

    #region filters
    private async Task OnMultiValueClosed()
    {
        var filteredOrders = _allOrders.Where(x => selectedAssignedPersons.Contains(x.AssignedPerson)).ToList();
        await DisplayAppointments(filteredOrders);
    }
    #endregion

    #region Scheduler 
    // ==== Scheduler CUD handlers ====
    private async Task OnCreateAppointment(SchedulerCreateEventArgs args)
    {

        if (args.Item is SchedulerAppointment newAppt && SchedulerRef != null)
        {
            Appointments.Add(newAppt);
            await ApptService.UpdateAppointment(newAppt);
            SchedulerRef.Rebind();
        }
    }

    private async Task OnUpdateAppointment(SchedulerUpdateEventArgs args)
    {
        if (args.Item is SchedulerAppointment updAppt)
        {
            var ind = Appointments.FindIndex(a => a.AppointmentId == updAppt.AppointmentId);
            if (ind >= 0)
            {
                Appointments[ind] = updAppt.ShallowCopy(); 
                await ApptService.UpdateAppointment(Appointments[ind]);
                SchedulerRef?.Rebind();
            }
        }
    }

    private async Task OnDeleteAppointment(SchedulerDeleteEventArgs args)
    {
        if (args.Item is SchedulerAppointment delAppt)
        {
            await ApptService.DeleteAppointment(delAppt); // Delete from service
            Appointments.RemoveAll(a => a.AppointmentId == delAppt.AppointmentId);
            SchedulerRef?.Rebind();
        }
    }

    private void OnDateClick(int day)
    {
        // var currentDate = DateTime.Now;
        // var navigateDate = new DateTime(currentDate.Year, currentDate.Month, day);

        // CurrView = SchedulerView.Day;
        // SelectedDate = navigateDate;
    }

    async void RefreshData()
    {
        //await ApptService.UpdateAppointment(CurrentAppointment); // Save changes to the service
        CustomEditFormShown = false;
        // CurrentAppointment = null;
        //await LoadData(); 
        SchedulerRef?.Rebind();
    }

    void EditHandler(SchedulerEditEventArgs args)
    {
        args.IsCancelled = true;//prevent built-in edit form from showing up
        SchedulerAppointment item = args.Item as SchedulerAppointment;
        CustomEditFormShown = true;
        if (!args.IsNew) // an edit operation, otherwise - an insert operation
        {
            //copying is implemented in the appointment model and it is needed because
            //this is a reference to the data collection so modifying it directly
            //will immediately modify the data and no cancelling will be possible
            CurrentAppointment = item;//.ShallowCopy();
        }
        else
        {
            CurrentAppointment = new SchedulerAppointment() { Start = args.Start, End = args.End, IsAllDay = args.IsAllDay };
        }
    }

    void CancelEditing()
    {
        //TODO undo changes if any
        CustomEditFormShown = false;
    }


    #endregion

    #region Grid Row Styles
    void OnRowRenderHandler(GridRowRenderEventArgs args)
    {
        // var item = args.Item as WorkOrder;

        // args.Class += "state-" + item?.StateColor.TrimStart('#')+
        // " tooltip-target";

    }


    private MarkupString RenderStatesStyle(List<WorkOrder> orders)
    {
        var uniqueColors = orders
           .Select(o => o.StateColor)
           .Where(c => !string.IsNullOrWhiteSpace(c))
           .Distinct();

        var sb = new StringBuilder();
        sb.AppendLine("<style>");
        foreach (var color in uniqueColors)
        {
            var safeName = color.TrimStart('#');
            switch (safeName.ToLowerInvariant())
            {
                case "lime":
                    safeName = "LightGreen";
                    break;
                case "red":
                    safeName = "LightCoral";
                    break;
                case "yellow":
                    safeName = "LightYellow";
                    break;
                default:
                    break;
            }
            sb.AppendLine($".state-{color} {{");
            sb.AppendLine($"    background-color: {safeName};");
            sb.AppendLine("}");
        }
        sb.AppendLine("</style>");

        return new MarkupString(sb.ToString());
    }
    #endregion
}
