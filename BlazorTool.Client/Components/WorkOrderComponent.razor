@using System.Text.Json.Serialization
@using BlazorTool.Client.Models
@using System.Globalization
@inject BlazorTool.Client.Services.ApiServiceClient apiService


<PageTitle>Order №@(WorkOrder?.WorkOrderID)</PageTitle>

<div class="work-order-container">
  @if(WorkOrder != null)
        {
    <!-- HEADER -->
    <CardHeader Class="position-relative">
    <h2 class="mb-1">Order №@WorkOrder.WorkOrderID</h2>

    <!-- Status-->
<div class="position-absolute top-50 end-0 translate-middle-y p-2">
    <span class="badge @GetStateColor(@WorkOrder.StateColor) fs-3">
        @WorkOrder.WOState
    </span>
</div>

    <div class="position-absolute top-50 end-50 translate-middle-y  fs-5 ">
      <div><strong>Device:</strong> @WorkOrder.AssetNo</div>
      <div><strong>Category:</strong> @WorkOrder.DeviceCategory</div>
    </div>
  </CardHeader> 

    <!-- INFO CARDS GRID -->
    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-3 mt-3">
        <!-- Description -->
        <div class="col">
            <TelerikCard Class="h-100">
                <CardHeader Class="py-1 px-2">
                    <CardTitle>Description</CardTitle>
                </CardHeader>
                <CardBody Class="p-2 card-body-description">
                    <div class="field-group">
                        <label>Description:</label>
                        
                                <TelerikTextArea @bind-Value="@WorkOrder.WODesc"
                                                 ReadOnly=@(isEditable == false) 
                                                 Size="sm"
                                             ResizeMode="@TextAreaResizeMode.Auto" />
                    </div>
                    <div class="field-group">
                        <label>Category:</label>
                        <div class="field-value">@(WorkOrder.WOCategory ?? "Not specified")</div>
                    </div>
                    <div class="field-group">
                        <label>Reason:</label>
                        <div class="field-value">@(WorkOrder.WOReason ?? "Not specified")</div>
                    </div>
                    <div class="field-group">
                        <label>Level:</label>
                        <div class="field-value">@(WorkOrder.WOLevel ?? "Not specified")</div>
                    </div>
                </CardBody>
            </TelerikCard>
        </div>

        <!-- Executors -->
        <div class="col">
            <TelerikCard Class="h-100">
                <CardHeader Class="py-1 px-2">
                    <CardTitle>Executors</CardTitle>
                </CardHeader>
                <CardBody Class="p-2">
                    <div class="field-group">
                        <label>Assigned Person:</label>
                            <TelerikComboBox Data="@ListPersons"
                                             Value="@WorkOrder.AssignedPerson"
                                             Placeholder="Select person..."
                                             ValueChanged="@((string name) => OnAssignedPersonChanged(name))"
                                             Width="100%"
                                             ReadOnly=@(isEditable == false)
                                             ShowClearButton=false
                                                 >
                            </TelerikComboBox>
                    </div>
                    <div class="field-group">
                        <label>Take Persons:</label>
                        <div class="field-value">@(string.IsNullOrEmpty(WorkOrder.TakePersons) ? "Not specified" : WorkOrder.TakePersons)</div>
                    </div>
                    <div class="field-group">
                        <label>Department:</label>
                                <TelerikComboBox Data="@ListDepartments"
                                                 Value="@WorkOrder.DepName"
                                                 Placeholder="Select department..."
                                                 ValueChanged="@((string name) => OnDepartmentChanged(name))"
                                                 Width="100%"
                                                 ReadOnly=@(isEditable == false)
                                                 ShowClearButton=false
                                
                                >
                                                 
                                </TelerikComboBox>
                    </div>
                </CardBody>
            </TelerikCard>
        </div>

        <!-- Dates -->
        <div class="col">
            <TelerikCard Class="h-100">
                <CardHeader Class="py-1 px-2">
                    <CardTitle>Dates</CardTitle>
                </CardHeader>
                <CardBody Class="p-2">
                    <div class="dates-grid">
                        <div class="date-item">
                            <label>Added:</label>
                            <div class="date-value">@FormatDateTime(WorkOrder.AddDate)</div>
                        </div>
                        <div class="date-item">
                            <label>Accepted for processing:</label>
                            <div class="date-value">@FormatDateTime(WorkOrder.TakeDate)</div>
                        </div>
                        <div class="date-item">
                            <label>Start:</label>
                            <div class="date-value">@FormatDateTime(WorkOrder.StartDate)</div>
                        </div>
                        <div class="date-item">
                            <label>End:</label>
                            <div class="date-value">@FormatDateTime(WorkOrder.EndDate)</div>
                        </div>
                        <div class="date-item">
                            <label>Closed:</label>
                            <div class="date-value">@FormatDateTime(WorkOrder.CloseDate)</div>
                        </div>
                        <div class="date-item">
                            <label>Person Take Date:</label>
                            <div class="date-value">@FormatDateTime(WorkOrder.PersonTakeDate)</div>
                        </div>
                    </div>
                </CardBody>
            </TelerikCard>
        </div>
       
    </div>

    <!-- Statistics -->
    <TelerikCard Class="stats-card">
        <CardHeader>
            <CardTitle>Statistics</CardTitle>
        </CardHeader>
        <CardBody>
            <div class="stats-grid">
                <div class="stat-item">
                    <div class="stat-number">@(WorkOrder.ActCount ?? 0)</div>
                    <div class="stat-label">Actions</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">@(WorkOrder.FileCount ?? 0)</div>
                    <div class="stat-label">Files</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">@(WorkOrder.PartCount ?? 0)</div>
                    <div class="stat-label">Parts</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">@(WorkOrder.PlanActCount ?? 0)</div>
                    <div class="stat-label">PlanActCount</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">@(WorkOrder.IneffectiveCount ?? 0)</div>
                    <div class="stat-label">Ineffective Count</div>
                </div>
                <div class="stat-item">
                        @if (WorkOrder.Cost.HasValue)
                        {
                            <span class="cost-amount">@WorkOrder.Cost.Value.ToString("C2", new CultureInfo("pl-PL"))</span>
                            @* <span class="cost-amount">@WorkOrder.Cost.Value.ToString("C")</span> *@
                        }
                        else
                        {
                            <span class="cost-amount no-cost">Not specified</span>
                        }
                        <div class="stat-label-cost">Cost</div>
                    </div>
            </div>
            
        </CardBody>
    </TelerikCard>

    <!-- Modification Information -->
    @if (WorkOrder.ModDate.HasValue || !string.IsNullOrEmpty(WorkOrder.ModPerson))
    {
        <TelerikCard Class="modification-card">
            <CardHeader>
                <CardTitle>Recent Changes</CardTitle>
            </CardHeader>
            <CardBody>
                <div class="modification-info">
                    <div class="field-group">
                        <label>Change Date:</label>
                        <div class="field-value">@FormatDateTime(WorkOrder.ModDate)</div>
                    </div>
                    <div class="field-group">
                        <label>Modified By:</label>
                        <div class="field-value">@(string.IsNullOrEmpty(WorkOrder.ModPerson) ? "Not specified" : WorkOrder.ModPerson)</div>
                    </div>
                </div>
            </CardBody>
        </TelerikCard>
    }
    }
    else
    {
    <p class="error">No workorder found for ID=@WorkOrder.WorkOrderID</p>
    }

</div>




@code {
    [Parameter] public WorkOrder? WorkOrder { get; set; }
    [Parameter] public List<string>? ListPersons { get; set; }
    [Parameter] public List<string>? ListDepartments { get; set; }
    [Parameter] public bool isEditable { get; set; } = false;
    // bool isLoading = false;
    // bool isLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        if (ListPersons == null)
        {
            ListPersons = new List<string>() { "Not assigned" };
        }else
        {
            ListPersons.Add("Not assigned");
        }

        if (ListDepartments != null)
        {
            if (ListDepartments.Contains("All"))
            {
                ListDepartments.Remove("All");
            }
            ListDepartments.Add("Not assigned");
        }
        else 
        {
            ListDepartments = new List<string>() { "Not assigned" };
        }
    }

    private string FormatDateTime(DateTime? dateTime)
    {
        if (!dateTime.HasValue)
            return "Not specified";
            
        return dateTime.Value.ToString("dd.MM.yyyy HH:mm");
    }

    private async Task OnAssignedPersonChanged(object newValue)
    {
        var personName = newValue as string;
        if (WorkOrder != null && !string.IsNullOrEmpty(personName))
        {
            WorkOrder.AssignedPerson = personName == "Not assigned" ? string.Empty : personName;
        }
    }

    private async Task OnDepartmentChanged(object newValue)
    {
        var departmentName = newValue as string; // Updated variable name
        if (WorkOrder != null && !string.IsNullOrEmpty(departmentName))
        {
            WorkOrder.DepName = departmentName == "Not assigned" ? string.Empty : departmentName;
        }
    }

    private string GetStateColor(string? StateColor)
    {
        if (string.IsNullOrEmpty(StateColor))
            return "primary";
            
        return StateColor.ToLower() switch
        {
            "lime" => "bg-success",
            "red" => "bg-danger",
            "yellow" => "bg-warning",
            _ => "bg-dark"
        };
    }
}

