@using System.Text.Json.Serialization
@using BlazorTool.Client.Models
@using System.Globalization
@inject BlazorTool.Client.Services.ApiServiceClient apiService


<PageTitle>Order №@(WorkOrder?.WorkOrderID)</PageTitle>

<div class="work-order-container @(showActivities ? "activities-visible" : "")">
  @if(WorkOrder != null)
        {
    <!-- HEADER -->
    <CardHeader Class="position-relative">
    <h2 class="mb-1">Order №@WorkOrder.WorkOrderID</h2>

    <!-- Status-->
<div class="position-absolute top-50 end-0 translate-middle-y p-2">
    <span class="badge @GetStateColor(@WorkOrder.StateColor) fs-3">
        @WorkOrder.WOState
    </span>
</div>

    <div class="position-absolute top-50 end-50 translate-middle-y  fs-5 ">
                <div class="@DeviceAlarm"><strong>Device:</strong>
                    @if (isNewWorkOrder && isEditable)
                    {
                       <TelerikComboBox Data="@ListDevices"
                                        ValueField="@nameof(Device.MachineID)"
                                        TextField="@nameof(Device.AssetNo)"
                                        Placeholder="Select device..."
                                        ValueChanged="@((int devId) => OnDeviceChanged(devId))"
                                        Width="250px"
                                        ShowClearButton=false
                                        AllowCustom=false
                                        Class="@DeviceAlarm"
                                        Size="sm"
                                        >
                                        
                        </TelerikComboBox> 
                    }
                    else
                    {
                        @WorkOrder.AssetNo
                    }
                </div>
                <div><strong>Category:</strong> @(ListDevices?.FirstOrDefault(x=>x.MachineID == WorkOrder?.MachineID)?.DeviceCategory ?? "no device")</div>
    </div>
  </CardHeader> 

    <!-- INFO CARDS GRID -->
    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-3 mt-3">
        <!-- Description -->
        <div class="col">
            <TelerikCard Class="h-100">
                <CardHeader Class="py-1 px-2">
                    <CardTitle>Description</CardTitle>
                </CardHeader>
                <CardBody Class="p-2 card-body-description">
                    <div class="field-group">
                        <label>Description:</label>
                        
                                <TelerikTextArea @bind-Value="@WorkOrder.WODesc"
                                                 ReadOnly=@(isEditable == false) 
                                                 Size="sm"
                                             ResizeMode="@TextAreaResizeMode.Auto" />
                    </div>
                    <div class="field-group">
                        <label>Category:</label>
                            <TelerikComboBox Data="@ListDicts?.Where(c => c.ListType == listTypeForCategory).Select(n => n.Name).ToList()"
                                                 Value="@WorkOrder.WOCategory"
                                                 Placeholder="Select WO category..."
                                                 ValueChanged="@((string name) => OnCategoryChanged(name))"
                                                 Width="100%"
                                                 ReadOnly=@(isEditable == false)
                                                 ShowClearButton=false
                                                 AllowCustom=true>
                                </TelerikComboBox>
                    </div>
                    <div class="field-group">
                        <label>Reason:</label>
                        <div class="field-value">@(WorkOrder.WOReason ?? "Not specified")</div>
                    </div>
                    <div class="field-group">
                        <label>Level:</label>
                            <TelerikComboBox Data="@ListDicts?.Where(c => c.ListType == listTypeForLevel).Select(n => n.Name).ToList()"
                                             Value="@WorkOrder.WOLevel"
                                             Placeholder="Select WO level..."
                                             ValueChanged="@((string name) => OnLevelChanged(name))"
                                             Width="100%"
                                             ReadOnly=@(isEditable == false)
                                             ShowClearButton=false
                                             AllowCustom=true>
                            </TelerikComboBox>
                    </div>
                </CardBody>
            </TelerikCard>
        </div>

        <!-- Executors -->
        <div class="col">
            <TelerikCard Class="h-100">
                <CardHeader Class="py-1 px-2">
                    <CardTitle>Executors</CardTitle>
                </CardHeader>
                <CardBody Class="p-2">
                    <div class="field-group">
                        <label>Assigned Person:</label>
                            <TelerikComboBox Data="@ListPersons"
                                             Value="@WorkOrder.AssignedPerson"
                                             Placeholder="Select person..."
                                             ValueChanged="@((string name) => OnAssignedPersonChanged(name))"
                                             Width="100%"
                                             ReadOnly=@(isEditable == false)
                                             ShowClearButton=false
                                                 >
                            </TelerikComboBox>
                    </div>
                    <div class="field-group">
                        <label>Take Persons:</label>
                        <div class="field-value">@(string.IsNullOrEmpty(WorkOrder.TakePersons) ? "Not specified" : WorkOrder.TakePersons)</div>
                    </div>
                    <div class="field-group" >
                            <label class=@DepAlarm>Department:</label>
                                <TelerikComboBox Data="@ListDepartments"
                                                 Value="@WorkOrder.DepName"
                                                 Placeholder="Select department..."
                                                 ValueChanged="@((string name) => OnDepartmentChanged(name))"
                                                 Width="100%"
                                                 ReadOnly=@(isEditable == false)
                                                 ShowClearButton=false
                                Class="@DepAlarm"
                                >
                                                 
                                </TelerikComboBox>
                    </div>
                </CardBody>
            </TelerikCard>
        </div>

        <!-- Dates -->
        <div class="col">
            <TelerikCard Class="h-100">
                <CardHeader Class="py-1 px-2">
                    <CardTitle>Dates</CardTitle>
                </CardHeader>
                <CardBody Class="p-2">
                    <div class="dates-grid">
                        <div class="date-item">
                            <label>Added:</label>
                            <div class="date-value">@FormatDateTime(WorkOrder.AddDate)</div>
                        </div>
                        <div class="date-item">
                            <label>Accepted for processing:</label>
                            <div class="date-value">@FormatDateTime(WorkOrder.TakeDate)</div>
                        </div>
                        <div class="date-item">
                            <label class="@StartDateAlarm">Start:</label>
                            <div class="date-value @StartDateAlarm">@FormatDateTime(WorkOrder.StartDate)</div>
                        </div>
                        <div class="date-item">
                            <label>End:</label>
                            <div class="date-value">@FormatDateTime(WorkOrder.EndDate)</div>
                        </div>
                        <div class="date-item">
                            <label>Closed:</label>
                            <div class="date-value">@FormatDateTime(WorkOrder.CloseDate)</div>
                        </div>
                        <div class="date-item">
                            <label>Person Take Date:</label>
                            <div class="date-value">@FormatDateTime(WorkOrder.PersonTakeDate)</div>
                        </div>
                    </div>
                </CardBody>
            </TelerikCard>
        </div>
       
    </div>

    <!-- Statistics -->
    <TelerikCard Class="stats-card">
        <CardHeader>
            <CardTitle>Statistics</CardTitle>
        </CardHeader>
        <CardBody>
            <div class="stats-grid">
                <div class="stat-item" @onclick="ToggleActivities">
                    <div class="stat-number">@(WorkOrder.ActCount ?? 0)</div>
                    <div class="stat-label">Actions</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">@(WorkOrder.FileCount ?? 0)</div>
                    <div class="stat-label">Files</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">@(WorkOrder.PartCount ?? 0)</div>
                    <div class="stat-label">Parts</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">@(WorkOrder.PlanActCount ?? 0)</div>
                    <div class="stat-label">PlanActCount</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">@(WorkOrder.IneffectiveCount ?? 0)</div>
                    <div class="stat-label">Ineffective Count</div>
                </div>
                <div class="stat-item">
                        @if (WorkOrder.Cost.HasValue)
                        {
                            <span class="cost-amount">@WorkOrder.Cost.Value.ToString("C2", new CultureInfo("pl-PL"))</span>
                            @* <span class="cost-amount">@WorkOrder.Cost.Value.ToString("C")</span> *@
                        }
                        else
                        {
                            <span class="cost-amount no-cost">Not specified</span>
                        }
                        <div class="stat-label-cost">Cost</div>
                </div>
            </div>
                <div >
                        @if (showActivities)
                        {
                            <ActivityList WorkOrderId="WorkOrder.WorkOrderID" />
                        }
                </div>
            
        </CardBody>
    </TelerikCard>

    <!-- Modification Information -->
    @if (WorkOrder.ModDate.HasValue || !string.IsNullOrEmpty(WorkOrder.ModPerson))
    {
        <TelerikCard Class="modification-card">
            <CardHeader>
                <CardTitle>Recent Changes</CardTitle>
            </CardHeader>
            <CardBody>
                <div class="modification-info">
                    <div class="field-group">
                        <label>Change Date:</label>
                        <div class="field-value">@FormatDateTime(WorkOrder.ModDate)</div>
                    </div>
                    <div class="field-group">
                        <label>Modified By:</label>
                        <div class="field-value">@(string.IsNullOrEmpty(WorkOrder.ModPerson) ? "Not specified" : WorkOrder.ModPerson)</div>
                    </div>
                </div>
            </CardBody>
        </TelerikCard>
    }
    }
    else
    {
    <p class="error">No workorder found for ID=@WorkOrder.WorkOrderID</p>
    }

</div>




@code {

    [Parameter] public WorkOrder? WorkOrder { get; set; }
    [Parameter] public List<string>? ListPersons { get; set; }
    [Parameter] public List<string>? ListDepartments { get; set; }
    [Parameter] public List<Dict>? ListDicts { get; set; }
    [Parameter] public bool isEditable { get; set; } = false;
    [Parameter] public EventCallback OnStateChanged { get; set; }
    private int listTypeForCategory = 1;
    private int listTypeForLevel = 2;
    private int listTypeForReason = 3;
    private int listTypeForState = 4;
    private int listTypeForDepartment = 5;
    private string notAssigned = "Not assigned";
    private string notSpecified = "Not specified";
    private string DepAlarm = string.Empty;
    private string DeviceAlarm = string.Empty;
    private string StartDateAlarm = string.Empty;
    private bool showActivities = false;
    private bool isNewWorkOrder = false;
    private List<Device>? ListDevices { get; set; } = new List<Device>();

    protected override async Task OnInitializedAsync()
    {
        isNewWorkOrder = WorkOrder?.WorkOrderID == 0;

        if (isNewWorkOrder) {
            ListDevices = await apiService.GetAllDevicesCachedAsync();

            WorkOrder.EndDate = WorkOrder.StartDate?.AddHours(1);
            DeviceAlarm = string.IsNullOrWhiteSpace(WorkOrder?.AssetNo) ? "bg-warning" : string.Empty;
        }

        if (ListPersons == null )
        {
            ListPersons = new List<string>();
            if (!string.IsNullOrEmpty(WorkOrder?.AssignedPerson))
             ListPersons.Add(WorkOrder.AssignedPerson) ;
            
             ListPersons.Add(notAssigned);

        }else
        if (!ListPersons.Contains(notAssigned))
        {
            ListPersons.Add(notAssigned);
        }
        
        if (ListDepartments != null)
        {
            if (ListDepartments.Contains("All"))
                      ListDepartments.RemoveAll(d => d == "All");
        
        }
        else if (WorkOrder != null && !string.IsNullOrEmpty(WorkOrder.DepName))
        {
            ListDepartments = new List<string>() { WorkOrder.DepName };
        }

        if (!ListDepartments.Contains(notAssigned))
        {
            ListDepartments.Add(notAssigned);
        }

        if (ListDicts == null)
        {
            ListDicts = new List<Dict>(){new Dict()
            {
                    Name = WorkOrder?.WOCategory ?? notSpecified,
                    ListType = listTypeForCategory
                },
                    new Dict()
                {
                    Name = WorkOrder?.WOLevel ?? notSpecified,
                    ListType = listTypeForLevel
                },
                    new Dict()
                {
                    Name = WorkOrder?.WOReason ?? notSpecified,
                    ListType = listTypeForReason
                },
                    new Dict()
                {
                    Name = WorkOrder?.WOState ?? notSpecified,
                    ListType = listTypeForState
                },
                    new Dict()
                {
                    Name = WorkOrder?.DepName ?? notSpecified,
                    ListType = listTypeForDepartment

                } 
            };
        }

        if (string.IsNullOrEmpty(WorkOrder?.DepName) || WorkOrder.DepName == notAssigned)
        {
            DepAlarm = "bg-warning";
        }

        if (WorkOrder?.StartDate == null || WorkOrder.StartDate == DateTime.MinValue)
        {
            StartDateAlarm = "bg-warning";
        }

        if (isNewWorkOrder && WorkOrder != null)
        {
            WorkOrder.AddDate = DateTime.Now;
            WorkOrder.ModDate = DateTime.Now;
        }

    }


    #region Event Handlers
    private async Task OnAssignedPersonChanged(object newValue)
    {
        var personName = newValue as string;
        if (WorkOrder != null && !string.IsNullOrEmpty(personName))
        {
            WorkOrder.AssignedPerson = personName == notAssigned ? string.Empty : personName;
        }
    }

    private async Task OnDeviceChanged(int devId)
    {
        var device = ListDevices?.FirstOrDefault(d => d.MachineID == devId);
        if (WorkOrder != null && device != null)
        {
            WorkOrder.AssetNo = device.AssetNo; //?? or WorkOrder.AssetNo - custom?
            WorkOrder.DeviceCategory = device.DeviceCategory;
            WorkOrder.DeviceCategoryID = device.CategoryID;
            WorkOrder.MachineID = device.MachineID;
            await OnStateChanged.InvokeAsync();
            DeviceAlarm = string.Empty;
        }else
        {
            DeviceAlarm = "bg-warning";
        }
    }

    private void ToggleActivities()
    {
        showActivities = !showActivities;
    }

    private async Task OnCategoryChanged(object newValue)
    {
        var categoryName = newValue as string;
        if (WorkOrder != null && !string.IsNullOrEmpty(categoryName))
        {
            WorkOrder.WOCategory = categoryName;
            if (ListDicts?.Any(d => d.Name == categoryName && d.ListType == listTypeForCategory) == false)
            {
                ListDicts?.Add(new Dict
                {
                    Name = categoryName,
                    ListType = listTypeForCategory
                });            
            }
        }
    }

    private async Task OnDepartmentChanged(object newValue)
    {
        var departmentName = newValue as string; // Updated variable name
        if (WorkOrder != null && !string.IsNullOrEmpty(departmentName))
        {
            WorkOrder.DepName = departmentName == notAssigned ? string.Empty : departmentName;
        }
        if (string.IsNullOrEmpty(departmentName) || departmentName == notAssigned || departmentName == "All")
            DepAlarm = "bg-warning";
        else DepAlarm = string.Empty;
    }

    private async Task OnLevelChanged(object newValue)
    {
        var levelName = newValue as string;
        if (WorkOrder != null && !string.IsNullOrEmpty(levelName))
        {
            WorkOrder.WOLevel = levelName;
            if (ListDicts?.Any(d => d.Name == levelName && d.ListType == listTypeForLevel) == false)
            {
                ListDicts?.Add(new Dict
                {
                    Name = levelName,
                    ListType = listTypeForLevel
                });
            }
        }
    }

    #endregion Event Handlers

    private string GetStateColor(string? StateColor)
    {
        if (string.IsNullOrEmpty(StateColor))
            return "primary";
            
        return StateColor.ToLower() switch
        {
            "lime" => "bg-success",
            "red" => "bg-danger",
            "yellow" => "bg-warning",
            _ => "bg-dark"
        };
    }

    private string FormatDateTime(DateTime? dateTime)
    {
        if (!dateTime.HasValue)
            return "Not specified";
            
        return dateTime.Value.ToString("dd.MM.yyyy HH:mm");
    }
}

