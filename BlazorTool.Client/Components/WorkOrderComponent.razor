@using System.Text.Json.Serialization
@using BlazorTool.Client.Models
@using System.Globalization
@inject BlazorTool.Client.Services.ApiServiceClient apiService
@inject IStringLocalizer<Resources.UIStrings> Localizer


<PageTitle>@Localizer["WorkOrder_OrderNo"]@(WorkOrder?.WorkOrderID)</PageTitle>

<div class="work-order-container @(showActivities ? "activities-visible" : "")">
  @if(WorkOrder != null)
        {
    <!-- HEADER -->
    <CardHeader Class="position-relative">
    <h2 class="mb-1">@Localizer["WorkOrder_OrderNo"]@WorkOrder.WorkOrderID</h2>

    <!-- Status-->
<div class="position-absolute top-50 end-0 translate-middle-y p-2">
    <span class="badge @StateColor fs-3">
        @WorkOrder.WOState
    </span>
</div>

    <div class="position-absolute top-50 end-50 translate-middle-y custom-highlight fs-5 p-3 rounded">
                <div class="@DeviceAlarm"><strong>@Localizer["WorkOrder_Device"]</strong>
                    @if (isNewWorkOrder && isEditable)
                    {
                       <TelerikComboBox Data="@ListDevices"
                                        ValueField="@nameof(Device.MachineID)"
                                        TextField="@nameof(Device.AssetNo)"
                                        Placeholder="Select device..."
                                        ValueChanged="@((int devId) => OnDeviceChanged(devId))"
                                        Width="250px"
                                        ShowClearButton=false
                                        AllowCustom=false
                                        Class="@DeviceAlarm"
                                        Size="sm"
                                        >
                                        
                        </TelerikComboBox> 
                    }
                    else
                    {
                        @(selectedDevice?.AssetNo ?? WorkOrder.AssetNo ?? @Localizer["WorkOrder_NoDevice"])
                    }
                </div>
                <div><strong>Category:</strong> @(WorkOrder.DeviceCategory ?? selectedDevice?.DeviceCategory ?? @Localizer["WorkOrder_NoDevice"])</div>
    </div>
  </CardHeader> 

    <!-- INFO CARDS GRID -->
    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-3 mt-3">
        <!-- Description -->
        <div class="col">
            <TelerikCard Class="h-100">
                <CardHeader Class="py-1 px-2">
                    <CardTitle>@Localizer["WorkOrder_DescriptionTitle"]</CardTitle>
                </CardHeader>
                <CardBody Class="p-2 card-body-description">
                    <div class="field-group ">
                        <label>@Localizer["WorkOrder_Description"]</label>
                        
                                <TelerikTextArea @bind-Value="@WorkOrder.WODesc"
                                                 ReadOnly=@(isEditable == false) 
                                                 Size="sm"
                                             ResizeMode="@TextAreaResizeMode.Auto"
                                             Class="@DescriptionAlarm"
                                             OnChange="@OnDescriptionChanged"
                                             />
                    </div>
                    <div class="field-group">
                        <label>@Localizer["WorkOrder_Category"]</label>
                            <TelerikComboBox Data="@ListCategories"
                                                    ValueField="@nameof(Dict.Id)"
                                                    TextField="@nameof(Dict.Name)"
                                                 Value="@(WorkOrder?.CategoryID ?? 0)"
                                                 Placeholder="@Localizer["WorkOrder_SelectWOCategory"]"
                                                 ValueChanged="@((int id) => OnCategoryChanged(id))"
                                                 Width="100%"
                                                 ReadOnly=@(isEditable == false)
                                                 ShowClearButton=false
                                                 AllowCustom=false>
                                </TelerikComboBox>
                    </div>
                    <div class="field-group">
                        <label>@Localizer["WorkOrder_Reason"]</label>
                        <div class="field-value">@(WorkOrder?.WOReason ?? @Localizer["WorkOrder_NotSpecified"])</div>
                    </div>
                    <div class="field-group">
                        <label>@Localizer["WorkOrder_Level"]</label>
                            <TelerikComboBox Data="@ListLevels"
                                             ValueField="@nameof(Dict.Id)"
                                             TextField="@nameof(Dict.Name)"
                                             Value="@(WorkOrder?.LevelID ?? 0)"
                                             Placeholder="@Localizer["WorkOrder_SelectWOLevel"]"
                                             ValueChanged="@((int levelId) => OnLevelChanged(levelId))"
                                             Width="100%"
                                             ReadOnly=@(isEditable == false)
                                             ShowClearButton=false
                                             AllowCustom=false
                                             Class="@LevelAlarm"
                                             >
                            </TelerikComboBox>
                    </div>
                </CardBody>
            </TelerikCard>
        </div>

        <!-- Executors -->
        <div class="col">
            <TelerikCard Class="h-100">
                <CardHeader Class="py-1 px-2">
                    <CardTitle>@Localizer["WorkOrder_Executors"]</CardTitle>
                </CardHeader>
                <CardBody Class="p-2">
                    <div class="field-group">
                        <label>@Localizer["WorkOrder_AssignedPerson"]</label>
                            <TelerikComboBox Data="@ListPersons"
                                             Value="@WorkOrder.AssignedPerson"
                                             Placeholder="@Localizer["WorkOrder_SelectPerson"]"
                                             ValueChanged="@((string name) => OnAssignedPersonChanged(name))"
                                             Width="100%"
                                             ReadOnly=@(isEditable == false)
                                             ShowClearButton=false
                                                 >
                            </TelerikComboBox>
                    </div>
                    <div class="field-group">
                        <label>@Localizer["WorkOrder_TakePersons"]</label>
                        <div class="field-value">@(string.IsNullOrEmpty(WorkOrder.TakePersons) ? @Localizer["WorkOrder_NotSpecified"] : WorkOrder.TakePersons)</div>
                    </div>
                    <div class="field-group" >
                            <label class=@DepAlarm>@Localizer["WorkOrder_Department"]</label>
                                <TelerikComboBox Data="@ListDepartments"
                                                 Value="@WorkOrder.DepName"
                                                 Placeholder="Select department..."
                                                 ValueChanged="@((string name) => OnDepartmentChanged(name))"
                                                 Width="100%"
                                                 ReadOnly=@(isEditable == false)
                                                 ShowClearButton=false
                                Class="@DepAlarm"
                                >
                                                 
                                </TelerikComboBox>
                    </div>
                </CardBody>
            </TelerikCard>
        </div>

        <!-- Dates -->
        <div class="col">
            <TelerikCard Class="h-100">
                <CardHeader Class="py-1 px-2">
                    <CardTitle>@Localizer["WorkOrder_Dates"]</CardTitle>
                </CardHeader>
                <CardBody Class="p-2">
                    <div class="dates-grid">
                        <div class="date-item">
                            <label>@Localizer["WorkOrder_Added"]</label>
                            <div class="date-value">@FormatDateTime(WorkOrder.AddDate)</div>
                        </div>
                        <div class="date-item">
                            <label>@Localizer["WorkOrder_AcceptedForProcessing"]</label>
                            <div class="date-value">@FormatDateTime(WorkOrder.TakeDate)</div>
                        </div>
                        <div class="date-item">
                            <label class=@StartDateAlarm>@Localizer["WorkOrder_Start"]</label>
                            <div class="date-value @StartDateAlarm">@FormatDateTime(WorkOrder.StartDate)</div>
                        </div>
                        <div class="date-item">
                            <label>@Localizer["WorkOrder_End"]</label>
                            <div class="date-value">@FormatDateTime(WorkOrder.EndDate)</div>
                        </div>
                        <div class="date-item">
                            <label>@Localizer["WorkOrder_Closed"]</label>
                            <div class="date-value">@FormatDateTime(WorkOrder.CloseDate)</div>
                        </div>
                        <div class="date-item">
                            <label>@Localizer["WorkOrder_PersonTakeDate"]</label>
                            <div class="date-value">@FormatDateTime(WorkOrder.PersonTakeDate)</div>
                        </div>
                    </div>
                </CardBody>
            </TelerikCard>
        </div>
       
    </div>

    <!-- Statistics -->
    <TelerikCard Class="stats-card">
        <CardHeader>
            <CardTitle>@Localizer["WorkOrder_Statistics"]</CardTitle>
        </CardHeader>
        <CardBody>
            <div class="stats-grid">
                <div class="stat-item" @onclick="ToggleActivities">
                    <div class="stat-number">@(WorkOrder.ActCount ?? 0)</div>
                    <div class="stat-label">@Localizer["WorkOrder_Actions"]</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">@(WorkOrder.FileCount ?? 0)</div>
                    <div class="stat-label">@Localizer["WorkOrder_Files"]</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">@(WorkOrder.PartCount ?? 0)</div>
                    <div class="stat-label">@Localizer["WorkOrder_Parts"]</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">@(WorkOrder.PlanActCount ?? 0)</div>
                    <div class="stat-label">@Localizer["WorkOrder_PlanActCount"]</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">@(WorkOrder.IneffectiveCount ?? 0)</div>
                    <div class="stat-label">@Localizer["WorkOrder_IneffectiveCount"]</div>
                </div>
                <div class="stat-item">
                        @if (WorkOrder.Cost.HasValue)
                        {
                            <span class="cost-amount">@WorkOrder.Cost.Value.ToString("C2", new CultureInfo("pl-PL"))</span>
                            @* <span class="cost-amount">@WorkOrder.Cost.Value.ToString("C")</span> *@
                        }
                        else
                        {
                            <span class="cost-amount no-cost">Not specified</span>
                        }
                        <div class="stat-label-cost">@Localizer["WorkOrder_Cost"]</div>
                </div>
            </div>
                <div >
                        @if (showActivities)
                        {
                            <ActivityList WorkOrderId="WorkOrder.WorkOrderID" />
                        }
                </div>
            
        </CardBody>
    </TelerikCard>

    <!-- Modification Information -->
    @if (WorkOrder.ModDate.HasValue || !string.IsNullOrEmpty(WorkOrder.ModPerson))
    {
        <TelerikCard Class="modification-card">
            <CardHeader>
                <CardTitle>@Localizer["WorkOrder_RecentChanges"]</CardTitle>
            </CardHeader>
            <CardBody>
                <div class="modification-info">
                    <div class="field-group">
                        <label>@Localizer["WorkOrder_ChangeDate"]</label>
                        <div class="field-value">@FormatDateTime(WorkOrder.ModDate)</div>
                    </div>
                    <div class="field-group">
                        <label>@Localizer["WorkOrder_ModifiedBy"]</label>
                        <div class="field-value">@(string.IsNullOrEmpty(WorkOrder.ModPerson) ? "Not specified" : WorkOrder.ModPerson)</div>
                    </div>
                </div>
            </CardBody>
        </TelerikCard>
    }
    }
    else
    {
    <p class="error">@Localizer["WorkOrder_NoWorkOrderFound"]@WorkOrder.WorkOrderID</p>
    }

</div>




@code {

    [Parameter] public WorkOrder? WorkOrder { get; set; }
    [Parameter] public List<string>? ListPersons { get; set; }
    [Parameter] public bool isEditable { get; set; } = false;
    [Parameter] public EventCallback OnStateChanged { get; set; }
    [Parameter] public Person? currentUser { get; set; }
    // private int listTypeForCategory = 1;
    // private int listTypeForLevel = 2;
    // private int listTypeForReason = 3;
    // private int listTypeForState = 4;
    // private int listTypeForDepartment = 5;
    private string notAssigned = "Not assigned";
    private string notSpecified = "Not specified";
    private string DepAlarm = string.Empty;
    private string DeviceAlarm = string.Empty;
    private string DescriptionAlarm = string.Empty;
    private string LevelAlarm = string.Empty;
    private string StartDateAlarm = string.Empty;
    private bool showActivities = false;
    private bool isNewWorkOrder = false;
    private List<Device>? ListDevices { get; set; } = new List<Device>();
    private Device? selectedDevice;
    private List<Dict> ListCategories = new List<Dict>();
    private List<string> ListDepartments = new List<string>();
    private List<Dict> ListLevels = new List<Dict>();
    private string StateColor = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        isNewWorkOrder = WorkOrder?.WorkOrderID == 0;
        ListDevices = await apiService.GetAllDevicesCachedAsync();
        ListCategories =  apiService.GetWOCategories();
        ListLevels =  apiService.GetWOLevels();
        ListDepartments =  apiService.GetWODepartments().Select(c=>c.Name).ToList();
        StateColor = await apiService.GetStateColor(WorkOrder?.WorkOrderID);
        if (isNewWorkOrder) {
            WorkOrder.EndDate = WorkOrder.StartDate?.AddHours(1);
            DeviceAlarm = string.IsNullOrWhiteSpace(WorkOrder?.AssetNo) ? "bg-warning" : string.Empty;
        }
        selectedDevice = ListDevices?.FirstOrDefault(d => d.MachineID == WorkOrder?.MachineID);

        if (ListPersons == null )
        {
            ListPersons = new List<string>();
            if (!string.IsNullOrEmpty(WorkOrder?.AssignedPerson))
                ListPersons.Add(WorkOrder.AssignedPerson) ;

            ListPersons.Add(notAssigned);

        }else
        if (!ListPersons.Contains(notAssigned))
        {
            ListPersons.Add(notAssigned);
        }

        if (ListDepartments != null)
        {
            if (ListDepartments.Contains("All"))
                ListDepartments.RemoveAll(d => d == "All");

            if (!ListDepartments.Contains(notAssigned))
            {
                ListDepartments.Add(notAssigned);
            }
        }
        else if (WorkOrder != null && !string.IsNullOrEmpty(WorkOrder.DepName))
        {
            ListDepartments = new List<string>() { WorkOrder.DepName };
        }else
        {
            ListDepartments = new List<string>();
        }

        if (string.IsNullOrEmpty(WorkOrder?.DepName) || WorkOrder.DepName == notAssigned)
        {
            DepAlarm = "bg-warning";
        }

        if (WorkOrder?.StartDate == null || WorkOrder.StartDate == DateTime.MinValue)
        {
            StartDateAlarm = "bg-warning";
        }

        if (string.IsNullOrEmpty(WorkOrder?.WODesc))
        {
            DescriptionAlarm = "bg-warning";
        }

        if (string.IsNullOrEmpty(WorkOrder?.WOLevel) || WorkOrder.WOLevel == notSpecified)
        {
            LevelAlarm = "bg-warning";
        }

        if (isNewWorkOrder && WorkOrder != null)
        {
            WorkOrder.AddDate = DateTime.Now;
            WorkOrder.ModDate = DateTime.Now;
        }

    }


    #region Event Handlers
    private async Task OnAssignedPersonChanged(object newValue)
    {
        var personName = newValue as string;
        if (WorkOrder != null && !string.IsNullOrEmpty(personName))
        {
            WorkOrder.AssignedPerson = personName == notAssigned ? string.Empty : personName;
        }
    }

    private void OnDescriptionChanged()
    {
        if (WorkOrder != null && !string.IsNullOrWhiteSpace(WorkOrder.WODesc))
        {
            DescriptionAlarm = string.Empty;
        }
        else
        {
            DescriptionAlarm = "bg-warning";
        }
    }

    private async Task OnDeviceChanged(int devId)
    {
        var device = ListDevices?.FirstOrDefault(d => d.MachineID == devId);
        if (WorkOrder != null && device != null)
        {
            selectedDevice = device;
            WorkOrder.AssetNo = device.AssetNo; //?? or WorkOrder.AssetNo - custom?
            WorkOrder.DeviceCategory = device.DeviceCategory;
            WorkOrder.DeviceCategoryID = device.CategoryID;
            WorkOrder.MachineID = device.MachineID;
            await OnStateChanged.InvokeAsync();
            DeviceAlarm = string.Empty;
        }else
        {
            DeviceAlarm = "bg-warning";
        }
    }

    private void ToggleActivities()
    {
        showActivities = !showActivities;
    }

    private async Task OnCategoryChanged(int newValue)
    {
        var categoryName = ListCategories?.FirstOrDefault(c => c.Id == newValue)?.Name;
        if (WorkOrder != null && !string.IsNullOrEmpty(categoryName))
        {
            WorkOrder.WOCategory = categoryName;
            WorkOrder.CategoryID = newValue;
            await apiService.AddNewWODict(categoryName, (int)WOListTypeEnum.Category);
        }
    }

    private async Task OnDepartmentChanged(object newValue)
    {
        var departmentName = newValue as string; // Updated variable name
        if (WorkOrder != null && !string.IsNullOrEmpty(departmentName))
        {
            WorkOrder.DepName = departmentName == notAssigned ? string.Empty : departmentName;
        }
        if (string.IsNullOrEmpty(departmentName) || departmentName == notAssigned || departmentName == "All")
            DepAlarm = "bg-warning";
        else DepAlarm = string.Empty;

        await apiService.AddNewWODict(departmentName, (int)WOListTypeEnum.Department);

    }

    private async Task OnLevelChanged(int newValue)
    {
        var levelName = ListLevels?.FirstOrDefault(l => l.Id == newValue)?.Name;
        if (WorkOrder != null && !string.IsNullOrEmpty(levelName))
        {
            WorkOrder.WOLevel = levelName;
            WorkOrder.LevelID = newValue;
            await apiService.AddNewWODict(levelName, (int)WOListTypeEnum.Level);
        }

        if (string.IsNullOrEmpty(levelName) || levelName == notSpecified)
            LevelAlarm = "bg-warning";
        else LevelAlarm = string.Empty;
    }

    #endregion Event Handlers

     private string FormatDateTime(DateTime? dateTime)
    {
        if (!dateTime.HasValue)
            return @Localizer["WorkOrder_NotSpecified"];
            
        return dateTime.Value.ToString("dd.MM.yyyy HH:mm");
    }
}

