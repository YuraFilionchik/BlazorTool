@using BlazorTool.Client.Models
@using BlazorTool.Client.Services
@using Microsoft.AspNetCore.Components.Forms
@using Telerik.Blazor.Components.Scheduler.Models
@inject AppointmentService ApptService

<style>
    form label.width100 {
        width: 100%;
    }
</style>

<h4>Edit appointment</h4>

<EditForm Model="@Appointment" OnValidSubmit="@SaveAppointment">
    <DataAnnotationsValidator />
    <label class="width100">
        Title:<br />
        <TelerikTextBox @bind-Value="@Appointment.Title" Width="100%" />
    </label>
    <br />

        <label class="width100">
            Start:<br />
            <TelerikDateTimePicker @bind-Value="@Appointment.Start" Width="100%" />
        </label>
        <label class="width100">
            End:<br />
            <TelerikDateTimePicker @bind-Value="@Appointment.End" Width="100%" />
        </label>

    <ValidationSummary />

    <TelerikButton ThemeColor="@ThemeConstants.Button.ThemeColor.Primary">Save</TelerikButton>

    @* These buttons do not invoke validation, you can always delete an appointment or stop editing *@
    <TelerikButton OnClick="@CancelEditing" ButtonType="ButtonType.Button">Cancel</TelerikButton>
    <TelerikButton OnClick="@DeleteAppointment" ButtonType="ButtonType.Button">Delete</TelerikButton>

</EditForm>

@code{
    //communcation with the parent component where the scheduler is
    [Parameter] public SchedulerAppointment Appointment { get; set; }
    [Parameter] public EventCallback<string> OnAppointmentChanged { get; set; }

    async void SaveAppointment()
    {
        ApptService.UpdateAppointment(Appointment);
        await OnAppointmentChanged.InvokeAsync(Appointment.Title);
    }

    async void DeleteAppointment()
    {
        ApptService.DeleteAppointment(Appointment);
        await OnAppointmentChanged.InvokeAsync(Appointment.Title);
    }

    async void CancelEditing()
    {
        await OnAppointmentChanged.InvokeAsync(Appointment.Title);
    }
}